/*
 * File: app/controller/CrBti.js
 * Date: Wed Dec 09 2020 11:56:29 GMT+0200 (EET)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ykis.controller.CrBti', {
    extend: 'Ext.app.Controller',
    alias: 'controller.crBti',

    refs: {
        WinDogovor: '#winDogovor',
        WinDogovorRestr: '#winDogovorRestr',
        WinLgotnik: '#winLgotnik',
        WinFamaly: '#winFamaly'
    },

    control: {
        "#tabDogovor": {
            activate: 'onTabDogovorActivate'
        },
        "#tabAppBti": {
            activate: 'onTabAppBtiActivate'
        },
        "#winBtnAddLgotnik": {
            click: 'onWinBtnAddLgotnikClick'
        },
        "#grAppHistory": {
            selectionchange: 'onGrAppHistorySelectionChange'
        },
        "#btAddAddress": {
            click: 'onBtAddAddressClick'
        },
        "#btnDeleteAddress": {
            click: 'onBtnDeleteAddressClick'
        },
        "#winBtnAddDogovor": {
            click: 'onWinBtnAddDogovorClick'
        },
        "#btAddOsmd": {
            click: 'onBtAddOsmdClick'
        },
        "#winBtnAddCitizen": {
            click: 'onWinBtnAddCitizenClick'
        },
        "#winBtnAddDogovorRestr": {
            click: 'onWinBtnAddDogovorRestrClick'
        }
    },

    onTabDogovorActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var StDogovor = Ext.data.StoreManager.get("StDogovor");
        var StCompany = Ext.data.StoreManager.get("StCompany");

        switch (values.get('role')){
            case "2":
            case "5":
            case "3":
            case "4":
                StCompany.load({
                    params: {
                        what:'companyOne',
                        role:values.get('role'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    scope:this
                });
                break;
            case "7":
                StCompany.load({
                    params: {
                        what:'company',
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    scope:this
                });
                break;
            default:
                Ext.MessageBox.show({
                    title: 'Ошибка ',
                    msg: 'У Вас нет прав открывать базу договоров',
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

        }



    },

    onTabAppBtiActivate: function(component, eOpts) {
        //in use

        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD

        var values =stUser.getAt(0);
        var login = values.get('login');
        var password = values.get('password');
        var address_id = values.get('address_id');
        var raion_id = values.get('raion_id');
        var address = values.get('address');
        var house_id = values.get('house_id');
        var prixod_id = values.get('prixod_id');

        //LOGIKA

        var fmAppartment = Ext.getCmp('fmAppartment');


        //STORE

        var stAppartment = Ext.data.StoreManager.get("StAppartment");
        var stHAppartment = Ext.data.StoreManager.get("StHAppartment");
        var stFamaly = Ext.data.StoreManager.get("StFamaly");



        stAppartment.load({
            params: {
                what_id:address_id,
                address_id: address_id,
                what:'Appartment',
                login:login,
                password:password
            },
            callback: function(records,operation,success){

                //   console.log(records);

                if(success){
                    stFamaly.removeAll();
                    stFamaly.load({
                        params: {
                            what_id:address_id,
                            address_id: address_id,
                            what:'Famaly',
                            login:login,
                            password:password
                        },
                        scope:this
                    });
                    stHAppartment.load({
                        params: {
                            what_id:address_id,
                            address_id: address_id,
                            what:'HistoryAppartment',
                            login:login,
                            password:password
                        },
                        scope:this
                    });
                    if (records.length) {
                        fmAppartment.getForm().loadRecord(records[0]);

                        var data_change = fmAppartment.getForm().findField('data_change').getValue();
                        var what_change = fmAppartment.getForm().findField('what_change').getValue();

                        fmAppartment.getForm().findField('chdata').setValue(data_change);
                        fmAppartment.getForm().findField('info').setValue(what_change);
                    }
                }
            },
            scope:this
        });


    },

    onWinBtnAddLgotnikClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        this.getWinLgotnik().close();
        switch (vibor){
            case 'addLgotnik':
                me.addLgotnik(value);
                break;
            case 'editLgotnik':
                me.editLgotnik(value);
                break;
            case 'editTabLgotnik':
                me.editTabLgotnik(value);
                break;
        }
    },

    onGrAppHistorySelectionChange: function(model, selected, eOpts) {

        //console.log(selected[0]);
        //LOGIN & PASSWORD
        var form = Ext.getCmp('fmAppartment');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
        }

    },

    onBtAddAddressClick: function(button, e, eOpts) {
        // in use
        var form = button.findParentByType('form');
        var value = form.getValues();

        var  cbAddress = form.getForm().findField('address');

        //console.log(value);
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"newAddress"
        };


        //LOGIKA

        Ext.Object.merge(value, params);
        //LOGIKA

        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод нового адреса',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StAddress.removeAll();
                cbAddress.clearValue();
                cbAddress.setDisabled(false);

                StAddress.load({
                    params: {
                        what:'AddressFromHouses',
                        what_id: value.house_id
                    },
                    scope: this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Ввод нового адреса',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtnDeleteAddressClick: function(button, e, eOpts) {
        // in use
        var form = button.findParentByType('form');
        var value = form.getValues();
        var  cbAddress = Ext.getCmp('cbAddress');
        var  chbDeleteAddress = Ext.getCmp('chbDeleteAddress');
        var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');
        //console.log(value);
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"delAddress"
        };


        //LOGIKA

        Ext.Object.merge(value, params);
        //LOGIKA

        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Удаление адреса',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });

                chbDeleteAddress.setVisible(false);
                fmDeleteAddress.setVisible(false);
                StAddress.removeAll();
                cbAddress.clearValue();
                cbAddress.setDisabled(false);

                StAddress.load({
                    params: {
                        what:'AddressFromHouses',
                        what_id: value.delHouseId
                    },
                    scope: this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Удаление адреса',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onWinBtnAddDogovorClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        this.getWinDogovor().close();
        switch (vibor){
            case 'addDogovorVik':
                me.DogovorVik(value);
                break;
            case 'editDogovorVik':
                me.DogovorVik(value);
                break;
                   case 'addDogovorYtke':
                me.DogovorYtke(value);
                break;
            case 'editDogovorYtke':
                me.DogovorYtke(value);
                break;
        }
    },

    onBtAddOsmdClick: function(button, e, eOpts) {

    },

    onWinBtnAddCitizenClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        //console.log(vibor);

        this.getWinFamaly().close();
        switch (vibor){
            case 'addCitizen':
                me.addCitizen(value);
                break;
            case 'editCitizen':
                me.editCitizen(value);
                break;

        }
    },

    onWinBtnAddDogovorRestrClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER

        var value = button.findParentByType('form').getValues();
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('vibor');
        this.getWinDogovorRestr().close();
        switch (vibor){
            case 'addDogRestrVik':
                me.DogRestrVik(value);
                break;
            case 'editDogRestrVik':
                me.DogRestrVik(value);
                break;

        }
    },

    addLgotnik: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stLgotnik = Ext.data.StoreManager.get("StLgotnik");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotnik"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){
                stLgotnik.removeAll();
                stLgotnik.load({
                    params: {
                        what_id:value.address_id,
                        address_id: value.address_id,
                        what:'Lgotnik',
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            Ext.MessageBox.show({
                                title: 'Добавление льготника',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Добавление льготника',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });

    },

    addCitizen: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StFamaly = Ext.data.StoreManager.get("StFamaly");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addCitizen"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){
                StFamaly.removeAll();
                StFamaly.load({
                    params: {
                        what_id:value.address_id,
                        address_id: value.address_id,
                        what:'Famaly',
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            Ext.MessageBox.show({
                                title: 'Добавление льготника',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Добавление квартиросьемщика',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });

    },

    DogovorVik: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stDogovor = Ext.data.StoreManager.get("StDogovor");
        //var stAppartment = Ext.data.StoreManager.get("StAppartment");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:values.get('vibor')
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){

                stDogovor.removeAll();
                stDogovor.load({
                    params: {
                        dog_id:value.dog_id,
                        address_id: value.address_id,
                        what:'getDogovorVik',
                        login:value.login,
                        password:value.password
                    },
                                scope:this

                });
                 Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                me.onTabAppBtiActivate();
            } else {
                Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });


    },

    DogRestrVik: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stDogovor = Ext.data.StoreManager.get("StDogovor");
        //var stAppartment = Ext.data.StoreManager.get("StAppartment");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:values.get('vibor')
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){

                stDogovor.removeAll();
                stDogovor.load({
                    params: {
                        dog_id:value.dog_id,
                        address_id: value.address_id,
                        what:'getDogRestrVik',
                        login:value.login,
                        password:value.password
                    },
                    scope:this

                });
                Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                me.onTabAppBtiActivate();
            } else {
                Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });


    },

    DogovorYtke: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stDogovor = Ext.data.StoreManager.get("StDogovor");
        //var stAppartment = Ext.data.StoreManager.get("StAppartment");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:values.get('vibor')
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){

                stDogovor.removeAll();
                stDogovor.load({
                    params: {
                        dog_id:value.dog_id,
                        address_id: value.address_id,
                        what:'getDogovorYtke',
                        login:value.login,
                        password:value.password
                        },
                    scope:this

                });
                me.onTabAppBtiActivate();
                 Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });
    },

    editLgotnik: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stLgotnik = Ext.data.StoreManager.get("StLgotnik");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotnik"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){
                stLgotnik.removeAll();
                stLgotnik.load({
                    params: {
                        what_id:value.address_id,
                        address_id: value.address_id,
                        what:'Lgotnik',
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            Ext.MessageBox.show({
                                title: 'Редактирование данных по льготнику',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование данных по льготнику',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });

    },

    editCitizen: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StFamaly = Ext.data.StoreManager.get("StFamaly");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editCitizen"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){
                StFamaly.removeAll();
                StFamaly.load({
                    params: {
                        what_id:value.address_id,
                        address_id: value.address_id,
                        what:'Famaly',
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            Ext.MessageBox.show({
                                title: 'Редактирование данных по квартиросьемщику',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование данных по квартиросьемщику',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });

    },

    editTabLgotnik: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stLgotnik = Ext.data.StoreManager.get("StLgotnikTab");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);

        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotnik"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){
                stLgotnik.removeAll();
                stLgotnik.load({
                    params: {
                        house_id: value.house_id,
                        what:value.report,
                        login:value.login,
                        password:value.password
                    },
                    callback: function(records,operation,success){
                        if(success){
                            Ext.MessageBox.show({
                                title: 'Редактирование данных по льготнику',
                                msg: results.msg,
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.INFO
                            });
                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование данных по льготнику',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });

    }

});
