/*
 * File: app/controller/AppNach.js
 * Date: Wed Dec 09 2020 11:56:29 GMT+0200 (EET)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ykis.controller.AppNach', {
    extend: 'Ext.app.Controller',

    refs: {
        WinAddLgotaPerer: '#winAddLgotaPerer',
        WinEditOplata: '#winEditOplata',
        WinEditDbfLgota: '#winEditDbfLgota',
        winImport: {
            selector: 'winImport',
            xtype: 'winimport'
        }
    },

    control: {
        "#tabNachApp": {
            activate: 'onTabNachAppActivate'
        },
        "#tabOplata": {
            activate: 'onTabOplataActivate'
        },
        "#tabNachAppVoda": {
            activate: 'onTabNachAppVodaActivate'
        },
        "#tabUtszn": {
            activate: 'onTabUtsznActivate'
        },
        "#tabVoda": {
            activate: 'onTabVodaActivate'
        },
        "#tabPodogrev": {
            activate: 'onTabPodogrevActivate'
        },
        "#tabNachAppTeplo": {
            activate: 'onTabNachAppTeploActivate'
        },
        "#tabTbo": {
            activate: 'onTabTboActivate'
        },
        "#tabKvartplata": {
            activate: 'onTabKvartplataActivate'
        },
        "#tabFmAppPodogrev": {
            activate: 'onTabFmAppPodogrevActivate'
        },
        "#tabFmAppAvoda": {
            activate: 'onTabFmAppAvodaActivate'
        },
        "#tabFmAppPtn": {
            activate: 'onTabFmAppPtnActivate'
        },
        "#tabFmAppOtoplenie": {
            activate: 'onTabFmAppOtoplActivate'
        },
        "#tabFmAppTbo": {
            activate: 'onTabFmAppTboActivate'
        },
        "#tabFmAppKvartplata": {
            activate: 'onTabFmAppKvartplataActivate'
        },
        "#tabFmAppStoki": {
            activate: 'onTabFmAppStokiActivate'
        },
        "#exportBudjet": {
            activate: 'onExportBudjetActivate'
        },
        "#tabFmAppVoda": {
            activate: 'onTabFmAppVodaActivate'
        },
        "#tabDbfLgota": {
            activate: 'onTabDbfLgotaActivate'
        },
        "#tabSubsidia": {
            activate: 'onTabSubsidiaActivate'
        },
        "#grNachVoda": {
            selectionchange: 'onGrNachVodaSelectionChange'
        },
        "#grLgotaNachVoda": {
            selectionchange: 'onGrLgotaNachVodaSelectionChange'
        },
        "#grNachStoki": {
            selectionchange: 'onGrNachStokiSelectionChange'
        },
        "#grNachAvoda": {
            selectionchange: 'onGrNachAvodaSelectionChange'
        },
        "#grLgotaNachStoki": {
            selectionchange: 'onGrLgotaNachStokiSelectionChange'
        },
        "#grNachPodogrev": {
            selectionchange: 'onGrNachPodogrevSelectionChange'
        },
        "#grLgotaNachPodogrev": {
            selectionchange: 'onGrLgotaNachPodogrevSelectionChange'
        },
        "#grNachPtn": {
            selectionchange: 'onGrNachPtnSelectionChange'
        },
        "#grNachOtoplenie": {
            selectionchange: 'onGrNachOtoplenieSelectionChange'
        },
        "#grLgotaNachOtoplenie": {
            selectionchange: 'onGrLgotaNachOtoplenieSelectionChange'
        },
        "#grNachTbo": {
            selectionchange: 'onGrNachTboSelectionChange'
        },
        "#grLgotaNachTbo": {
            selectionchange: 'onGrLgotaNachTboSelectionChange'
        },
        "#grNachKvartplata": {
            selectionchange: 'onGrNachKvartplataSelectionChange'
        },
        "#grLgotaNachKvartplata": {
            selectionchange: 'onGrLgotaNachKvartplataSelectionChange'
        },
        "#grTarifHousesKv": {
            selectionchange: 'onGrTarifHousesKvSelectionChange'
        },
        "#grTarifHousesTbo": {
            selectionchange: 'onGrTarifHousesTboSelectionChange'
        },
        "#grTarifHousesVoda": {
            selectionchange: 'onGrTarifHousesVodaSelectionChange'
        },
        "#grTarifHousesPodogrev": {
            selectionchange: 'onGrTarifHousesPodogrevSelectionChange'
        },
        "#btAddLgotaPerer": {
            click: 'onBtAddLgotaPererClick'
        },
        "#btAddNachKv": {
            click: 'onBtAddNachKvClick'
        },
        "#btAddNachTbo": {
            click: 'onBtAddNachTboClick'
        },
        "#btAddNachVoda": {
            click: 'onBtAddNachVodaClick'
        },
        "#btUpdKubNorma": {
            click: 'onBtUpdKubNormaClick'
        },
        "#btAddPererKv": {
            click: 'onBtAddPererKvClick'
        },
        "#btAddPererTbo": {
            click: 'onBtAddPererTboClick'
        },
        "#btAddPererVoda": {
            click: 'onBtAddPererVodaClick'
        },
        "#btAddPererPodogrev": {
            click: 'onBtAddPererPodogrevClick'
        },
        "#btExportBudjet": {
            click: 'onBtExportBudjetClick'
        },
        "#btControlLgot": {
            click: 'onBtControlLgotClick'
        },
        "#btControlDbfLgot": {
            click: 'onBtControlDbfLgotClick'
        },
        "#btFixDolg": {
            click: 'onBtFixDolgClick'
        },
        "#btEditOplata": {
            click: 'onBtEditOplataClick'
        },
        "#btNachiKreditOplata": {
            click: 'onBtNachiKredittOplataClick'
        },
        "#btEditDbfLgota": {
            click: 'onBtEditDbfLgotaClick'
        },
        "#btAddNachPtn": {
            click: 'onBtAddNachPtnClick'
        },
        "#printDogRestrVoda": {
            click: 'onPrintDogRestrVodaClick'
        }
    },

    onTabNachAppActivate: function(component, eOpts) {
        //STORE

        var stUser = Ext.data.StoreManager.get("StUser");
        var stAppartment = Ext.data.StoreManager.get("StAppartment");//QueryAddress.getResults <Appartment>
        var form = Ext.getCmp('tabFmAppTbo');
        var tabPnNachApp = Ext.getCmp('tabPnNachApp');
        var fmInfoNachApp = Ext.getCmp('fmInfoNachApp');
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachTbo');

        var values =stUser.getAt(0);
        tabPnNachApp.setActiveTab(0);
        switch (values.get('role')){
            case "5":
            case "7":
                tabPnNachApp.setActiveTab(1);
                break;


        }
        if (values.get('address_id'))
            stAppartment.load({
                params: {
                    what_id: values.get('address_id'),
                    address_id:  values.get('address_id'),
                    what:'Appartment',
                    login:values.get('login'),
                    password:values.get('password')
                },
                callback: function(records,operation,success){


                    if(success){

                        if (records.length) {
                            fmInfoNachApp.getForm().loadRecord(records[0]);

                            var adrec = fmInfoNachApp.getForm().findField('address').getValue();
                            var fio = fmInfoNachApp.getForm().findField('nanim').getValue();
                            var kod = fmInfoNachApp.getForm().findField('address_id').getValue();


                            fmInfoNachApp.setTitle('ид&nbsp;&nbsp'+ kod + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +
                                                   adrec + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' +  fio);

                        }
                    }
                },
                scope:this
            });
        StTekNach.load({
            params: {
                what:'TboApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachTbo',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });

    },

    onTabOplataActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //console.log(stUser);

        var StOplata = Ext.data.StoreManager.get("StOplata");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);

        StOplata.load({
            params: {
                what:'OplataApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            scope:this
        });

    },

    onTabNachAppVodaActivate: function(component, eOpts) {
        var tabPnNachApp = Ext.getCmp('tabNachAppVoda');
        var tabFmAppVik = Ext.getCmp('tabFmAppVik');
        var stAppartment = Ext.data.StoreManager.get("StAppartment");
        var records =stAppartment.getAt(0);
        tabPnNachApp.setActiveTab(0);

        if (records) {
            tabFmAppVik.getForm().loadRecord(records);
            var dogVik = tabFmAppVik.getForm().findField('dog_vik').getValue();
            var rdogVik = tabFmAppVik.getForm().findField('rdog_vik').getValue();
            if(dogVik !=="") {
                tabFmAppVik.down('#btnOpenWinDogovorVik').setText('Договір № '+dogVik);
            }else {
                tabFmAppVik.down('#btnOpenWinDogovorVik').setText('Договіра немає');
            }
            if(rdogVik !=="") {
                tabFmAppVik.down('#btnOpenWinDogRestrVik').setText('Договір рестр № '+rdogVik);
            }else {
                tabFmAppVik.down('#btnOpenWinDogRestrVik').setText('Договіра рестр немає');
            }

        }


    },

    onTabUtsznActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var org_id = values.get('org_id');


        if (org_id){

            var StUtszn = Ext.data.StoreManager.get("StUtszn");
            var btnImportUtszn =  Ext.getCmp('btnImportUtszn');
            var btnUpdateReestrUtszn =  Ext.getCmp('btnUpdateReestrUtszn');
            var btnPrintReestrToUtszn =  Ext.getCmp('btnPrintReestrToUtszn');
            var lgota =  Ext.getCmp('lgota').getValue().vibor;

            btnImportUtszn.setDisabled(false);
            btnUpdateReestrUtszn.setDisabled(false);
            btnPrintReestrToUtszn.setDisabled(false);


            StUtszn.load({
                params: {
                    what:'utszn',
                    data:data,
                    lgota:lgota,
                    org_id:values.get('org_id'),
                    login:values.get('login'),
                    password:values.get('password')
                }
            });
        }else{
            var StCompany = Ext.data.StoreManager.get("StCompany");
            var dt = new Date() ;
            var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
            var dataNach = Ext.getCmp('dataNachUtszn');
            dataNach.setValue(Ext.Date.format(firstDay, 'Y'));
            data = dataNach.getValue();
            switch (values.get('role')){
                case "1":
                case "2":
                case "5":
                case "3":
                case "4":
                    StCompany.load({
                        params: {
                            what:'companyOne',
                            role:values.get('role'),
                            login:values.get('login'),
                            password:values.get('password')
                        },
                        scope:this
                    });
                    break;
                case "7":
                    StCompany.load({
                        params: {
                            what:'company',
                            login:values.get('login'),
                            password:values.get('password')
                        },
                        scope:this
                    });
                    break;
                default:
                    Ext.MessageBox.show({
                        title: 'Ошибка ',
                        msg: 'У Вас нет прав открывать базу РКО',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });

            }
        }
    },

    onTabVodaActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmVoda');
        var btAddNach = Ext.getCmp('btAddNachVoda');
        var btAddPerer = Ext.getCmp('btAddPererVoda');
        var pnPerer = Ext.getCmp('pnPererVoda');
        var grid = Ext.getCmp('grTarifHousesVoda');
        var store = grid.getStore();
        store.removeAll();
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        form.getForm().reset();
        form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        btAddNach.setText("Начислить воду и стоки за период  "+ Ext.Date.format(firstDay, 'F,Y'));
        btAddPerer.setText("Перерасчитать воду и стоки  в  "+ Ext.Date.format(firstDay, 'F,Y'));
        pnPerer.setTitle("Перерасчет воды и стоков за период ");
    },

    onTabPodogrevActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmPodogrev');
        var btAddNach = Ext.getCmp('btAddNachPtn');
        var btAddPerer = Ext.getCmp('btAddPererPodogrev');
        var pnPerer = Ext.getCmp('pnPererPodogrev');
        var grid = Ext.getCmp('grTarifHousesPodogrev');
        var store = grid.getStore();
        store.removeAll();
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        form.getForm().reset();
        form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        btAddNach.setText("Начислить ПТН за период  "+ Ext.Date.format(firstDay, 'F,Y'));
        btAddPerer.setText("Перерасчитать ПТН  за  "+ Ext.Date.format(firstDay, 'F,Y'));
        pnPerer.setTitle("Перерасчет ПТН за период "+ Ext.Date.format(firstDay, 'F,Y'));
    },

    onTabNachAppTeploActivate: function(component, eOpts) {
        var tabPnNachApp = Ext.getCmp('tabNachAppTeplo');
        var tabFmAppTeplo = Ext.getCmp('tabFmAppTeplo');
        var stAppartment = Ext.data.StoreManager.get("StAppartment");
        var records =stAppartment.getAt(0);
        tabPnNachApp.setActiveTab(0);

        if (records) {
            tabFmAppTeplo.getForm().loadRecord(records);
            var dogYtke = tabFmAppTeplo.getForm().findField('dog_ytke').getValue();
            if(dogYtke!=="") {
                tabFmAppTeplo.down('#btnOpenWinDogovorYtke').setText('Договір № '+dogYtke);
            } else {
                tabFmAppTeplo.down('#btnOpenWinDogovorYtke').setText('Договіра немає');
            }
        }

    },

    onTabTboActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmTbo');
        var btAddNach = Ext.getCmp('btAddNachTbo');
        var btAddPerer = Ext.getCmp('btAddPererTbo');
        var pnPerer = Ext.getCmp('pnPererTbo');
        var grid = Ext.getCmp('grTarifHousesTbo');
        var store = grid.getStore();
        store.removeAll();
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        form.getForm().reset();
        form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        btAddNach.setText("Начислить ТБО за период   "+ Ext.Date.format(firstDay, 'F,Y'));
        btAddPerer.setText("Перерасчитать ТБО за период  "+ Ext.Date.format(firstDay, 'F,Y'));
        pnPerer.setTitle("Перерасчет ТБО за период "+ Ext.Date.format(firstDay, 'F,Y'));

    },

    onTabKvartplataActivate: function(component, eOpts) {
        //STORE
        var form = Ext.getCmp('fmKvartplata');
        var btAddNach = Ext.getCmp('btAddNachKv');
        var btAddPerer = Ext.getCmp('btAddPererKv');
        var pnPerer = Ext.getCmp('pnPererKv');
        var grid = Ext.getCmp('grTarifHousesKv');
        var store = grid.getStore();
        store.removeAll();


        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        form.getForm().reset();
        form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        btAddNach.setText("Начислить квартплату за период  "+ Ext.Date.format(firstDay, 'F,Y'));
        btAddPerer.setText("Перерасчитать квартплату за  "+ Ext.Date.format(firstDay, 'F,Y'));
    },

    onTabFmAppPodogrevActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachPodogrev');


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        // DATA

        //LOGIKA
        StTekNach.load({
            params: {
                what:'PodogrevApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                   // console.log(form.getForm());

                    form.getForm().reset();
                  //  gridNachisl.getView().refresh();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachPodogrev',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onTabFmAppAvodaActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var gridNachisl = Ext.getCmp('grNachAvoda');


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        // DATA

        //LOGIKA
        StTekNach.load({
            params: {
                what:'AvodaApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });

    },

    onTabFmAppPtnActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachPtn');


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        // DATA

        //LOGIKA
        StTekNach.load({
            params: {
                what:'PtnApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){

                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachPtn',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onTabFmAppOtoplActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachOtoplenie');


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        // DATA

        //LOGIKA
        StTekNach.load({
            params: {
                what:'OtoplenieApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachOtoplenie',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onTabFmAppTboActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachTbo');


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        // DATA

        //LOGIKA
        StTekNach.load({
            params: {
                what:'TboApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachTbo',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onTabFmAppKvartplataActivate: function(component, eOpts) {
          //console.log(1);
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachKvartplata');

        var values =stUser.getAt(0);
        var form = component;
        StTekNach.load({
            params: {
                what:'KvartplataApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    // console.log(form.getForm());
                    gridNachisl.getView().refresh();
                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachKvartplata',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onTabFmAppStokiActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachStoki');


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        // DATA

        //LOGIKA
        StTekNach.load({
            params: {
                what:'StokiApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                    form.getForm().reset();
                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });
        StLgotaNach.load({
            params: {
                what:'LgotaNachStoki',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onExportBudjetActivate: function(component, eOpts) {
        var form = Ext.getCmp('fmExportBudjet');
        var dt = new Date();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        form.getForm().findField('subjectTo').setValue('utszn5139@ukr.net');
        form.getForm().findField('subjectFrom').setValue('yis@yuzhny.com');

        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = values.get('parentid');
        switch (vibor){
            case 'MgkcBudjet':
            //console.log(vibor);
            break;
            case 'VikBudjet':
            //console.log(vibor);
            break;
            case 'UgtransBudjet':
            // console.log(vibor);
            break;
            case 'YtkeBudjet':
            // console.log(vibor);
            break;
        }
    },

    onTabFmAppVodaActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNach = Ext.data.StoreManager.get("StTekNachApp");
        var StLgotaNach = Ext.data.StoreManager.get("StLgotaNachVoda");
        var gridNachisl = Ext.getCmp('grNachVoda');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        // FORM
        var form = component;
        gridNachisl.getView().getSelectionModel().deselectAll();
        form.getForm().reset();

        // DATA

        //LOGIKA

        StTekNach.load({
            params: {
                what:'VodaApp',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            },
            callback: function(records,operation,success){
                if(success){
                        gridNachisl.getView().refresh();

                    gridNachisl.getView().getSelectionModel().select(0);

                }else{
                    form.getForm().reset();
                }
            },
            scope:this
        });

        StLgotaNach.load({
            params: {
                what:'LgotaNachVoda',
                address_id: values.get('address_id'),
                login:values.get('login'),
                password:values.get('password')
            }
        });
    },

    onTabDbfLgotaActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //console.log(stUser);
        var StCompany = Ext.data.StoreManager.get("StCompany");


        var StSubsidia = Ext.data.StoreManager.get("StDbfLgota");
        var dataNach = Ext.getCmp('dataNachLgota');
        var dt = new Date() ;
        dt.setDate(dt.getDate() - 28);
        dt.getDate();
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        dataNach.setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        data = dataNach.getValue();
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var usluga_id = values.get('usluga_id');
        var btnGetSubsidiaOshadBank =  Ext.getCmp('btnGetLgotaOshadBank');
        var btnPrintReestrToOshadBank =  Ext.getCmp('btnPrintReestrToOshadBank');
        var btnPrintReestrFromOshadBank =  Ext.getCmp('btnPrintReestrFromOshadBank');

        var btnImportOshadBank =  Ext.getCmp('btnImportOshadBankLgota');
        var btnExportOshadBank =  Ext.getCmp('btnExportOshadBankLgota');
        var btnImportOplataOshad =  Ext.getCmp('btnImportOplataOshadLgota');
        var btnImportOplataYkis =  Ext.getCmp('btnImportOplataYkisLgota');
        var btnSubsidiaOtkat =  Ext.getCmp('btnLgotaOtkat');

        if (usluga_id){
            btnGetSubsidiaOshadBank.setDisabled(false);
            btnPrintReestrToOshadBank.setDisabled(false);
            btnPrintReestrFromOshadBank.setDisabled(false);

            btnImportOshadBank.setDisabled(false);
            btnExportOshadBank.setDisabled(false);
            btnImportOplataOshad.setDisabled(false);
            btnImportOplataYkis.setDisabled(false);
            btnSubsidiaOtkat.setDisabled(false);
            StSubsidia.load({
                params: {
                    what:'getDbfLgota',
                    data:data,
                    usluga_id:values.get('usluga_id'),
                    login:values.get('login'),
                    password:values.get('password')
                }
            });
        }
        switch (values.get('role')){
            case "1":
            case "2":
            case "5":
            case "3":
            case "4":
                StCompany.load({
                    params: {
                        what:'companyOne',
                        role:values.get('role'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    scope:this
                });
                break;
            case "7":
                StCompany.load({
                    params: {
                        what:'company',
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    scope:this
                });
                break;
        }
    },

    onTabSubsidiaActivate: function(component, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //console.log(stUser);
        var StCompany = Ext.data.StoreManager.get("StCompany");


        var StSubsidia = Ext.data.StoreManager.get("StSubsidia");
        var dataNach = Ext.getCmp('dataNachSubsidia');

        var dt = new Date() ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;
        dataNach.setValue(Ext.Date.format(firstDay, 'Y-m-d'));
        data = dataNach.getValue();
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var usluga_id = values.get('usluga_id');
        var btnGetSubsidiaOshadBank =  Ext.getCmp('btnGetSubsidiaOshadBank');
        var btnPrintSubsReestrFromOshadBank =  Ext.getCmp('btnPrintSubsReestrFromOshadBank');
        var btnPrintSubsReestrToOshadBank =  Ext.getCmp('btnPrintSubsReestrToOshadBank');
        var btnImportOshadBank =  Ext.getCmp('btnImportOshadBank');
        var btnExportOshadBank =  Ext.getCmp('btnExportOshadBank');
        var btnImportOplataOshad =  Ext.getCmp('btnImportOplataOshad');
        var btnImportOplataYkis =  Ext.getCmp('btnImportOplataYkis');
        var btnSubsidiaOtkat =  Ext.getCmp('btnSubsidiaOtkat');

        if (usluga_id){
            btnGetSubsidiaOshadBank.setDisabled(false);
            btnPrintSubsReestrFromOshadBank.setDisabled(false);
            btnPrintSubsReestrToOshadBank.setDisabled(false);

            btnImportOshadBank.setDisabled(false);
            btnExportOshadBank.setDisabled(false);
            btnImportOplataOshad.setDisabled(false);
            btnImportOplataYkis.setDisabled(false);
            btnSubsidiaOtkat.setDisabled(false);
            StSubsidia.load({
                params: {
                    what:'getSubsidia',
                    data:data,
                    usluga_id:values.get('usluga_id'),
                    login:values.get('login'),
                    password:values.get('password')
                }
            });
        }

    },

    onGrNachVodaSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppVoda');
        //console.log(selected[0].data.data);

        //var record = selected[0].data;
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachVodaData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrLgotaNachVodaSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('tabFmAppVoda');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }

    },

    onGrNachStokiSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppStoki');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachStokiData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrNachAvodaSelectionChange: function(model, selected, eOpts) {
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppAvoda');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);

        }
    },

    onGrLgotaNachStokiSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('tabFmAppStoki');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }
    },

    onGrNachPodogrevSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppPodogrev');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachPodogrevData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrLgotaNachPodogrevSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('tabFmAppPodogrev');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }
    },

    onGrNachPtnSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppPtn');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachPtnData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrNachOtoplenieSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppOtoplenie');
        //console.log(selected[0]);
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachOtoplenieData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrLgotaNachOtoplenieSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('tabFmAppOtoplenie');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }
    },

    onGrNachTboSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppTbo');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachTboData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrLgotaNachTboSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('tabFmAppTbo');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }
    },

    onGrNachKvartplataSelectionChange: function(model, selected, eOpts) {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StLgotaNachVoda = Ext.data.StoreManager.get("StLgotaNachVoda");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var form = Ext.getCmp('tabFmAppKvartplata');
        if (selected.length > 0) {
            form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            StLgotaNachVoda.load({
                params: {
                    what:'LgotaNachKvartplataData',
                    address_id: values.get('address_id'),
                    data:Ext.Date.format(selected[0].data.data,"Ymd"),
                    login:values.get('login'),
                    password:values.get('password')
                },
                scope:this
            });
        }
    },

    onGrLgotaNachKvartplataSelectionChange: function(model, selected, eOpts) {
        var form = Ext.getCmp('tabFmAppKvartplata');
        if (selected.length > 0) {
            form.getForm().findField('msq_lgota').setValue(selected[0].data.info);

        }
    },

    onGrTarifHousesKvSelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmKvartplata');
        var btAddPererKv = Ext.getCmp('btAddPererKv');
        var printRaspechatkaHouseAllMgkc = Ext.getCmp('printRaspechatkaHouseAllMgkc');
        var printRaspechatkaHouse = Ext.getCmp('printRaspechatkaHouseMgkc');

        var viborTarif = Ext.getCmp('cbTarifKvartplata');
        var btnNachHouse = Ext.getCmp('btnNachHouseKvartplata');
        var btnNachHouseOsmd = Ext.getCmp('btnFixKvartplata');

        var tarif = Ext.getCmp('tarKvartplata');




        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected);
        if (selected.length > 0) {
            //form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            form.getForm().findField('house_id').setValue(selected[0].data.house_id);
            form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('sdata').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('fdata').setValue(Ext.Date.format(lastDay, 'Y-m-d'));
            form.getForm().findField('allkv').show();
            form.getForm().findField('address_ot').clearValue();
            form.getForm().findField('address_do').clearValue();
            printRaspechatkaHouseAllMgkc.setDisabled(false);
            printRaspechatkaHouse.setDisabled(false);

            viborTarif.clearValue();
            viborTarif.setDisabled(false);
            btnNachHouse.setDisabled(false);
            btnNachHouseOsmd.setDisabled(false);

            tarif.setValue(0);

            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    what_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }
    },

    onGrTarifHousesTboSelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmTbo');
        var btAddPerer = Ext.getCmp('btAddPererTbo');
        var viborTarif = Ext.getCmp('cbTarifTbo');
        var btnNachHouse = Ext.getCmp('btnNachHouseTbo');
        var tarif = Ext.getCmp('tarTbo');

        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected);
        if (selected.length > 0) {
            //form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            form.getForm().findField('house_id').setValue(selected[0].data.house_id);
            form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('sdata').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('fdata').setValue(Ext.Date.format(lastDay, 'Y-m-d'));
            form.getForm().findField('address_ot').clearValue();
            form.getForm().findField('address_do').clearValue();
             viborTarif.clearValue();
            viborTarif.setDisabled(false);
            btnNachHouse.setDisabled(false);
            tarif.setValue(0);

            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    what_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }
    },

    onGrTarifHousesVodaSelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmVoda');
        var pnPerer = Ext.getCmp('pnPererVoda');
        var btAddPerer = Ext.getCmp('btAddPererVoda');
        var viborTarif = Ext.getCmp('cbTarifVoda');
        var tarif = Ext.getCmp('tarVoda');

        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected);
        if (selected.length > 0) {
            //form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            form.getForm().findField('house_id').setValue(selected[0].data.house_id);
            form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('sdata').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('fdata').setValue(Ext.Date.format(lastDay, 'Y-m-d'));
            form.getForm().findField('address_ot').clearValue();
            form.getForm().findField('address_do').clearValue();
            viborTarif.clearValue();
            viborTarif.setDisabled(false);
            tarif.setValue(0);

            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    what_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }

    },

    onGrTarifHousesPodogrevSelectionChange: function(model, selected, eOpts) {
        //STORE

        var stAddress = Ext.data.StoreManager.get('StAddressOrg');
        var form = Ext.getCmp('fmPodogrev');
        var pnPerer = Ext.getCmp('pnPererPodogrev');
        var btAddPerer = Ext.getCmp('btAddPererPodogrev');
        var viborTarif = Ext.getCmp('cbTarifTeplo');
        var btnNachHouse = Ext.getCmp('btnNachHousePtn');
        var tarif = Ext.getCmp('tarTeplo');

        var dt = new Date();
        var lastDay = Ext.Date.getLastDateOfMonth( dt ) ;
        var firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        //console.log(selected);
        if (selected.length > 0) {
            //form.getForm().reset();
            form.getForm().loadRecord(selected[0]);
            form.getForm().findField('house_id').setValue(selected[0].data.house_id);
            form.getForm().findField('data').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('sdata').setValue(Ext.Date.format(firstDay, 'Y-m-d'));
            form.getForm().findField('fdata').setValue(Ext.Date.format(lastDay, 'Y-m-d'));
            form.getForm().findField('address_ot').clearValue();
            form.getForm().findField('address_do').clearValue();
            viborTarif.clearValue();
            viborTarif.setDisabled(false);
            btnNachHouse.setDisabled(false);
            tarif.setValue(0);

            stAddress.removeAll();
            stAddress.load({
                params: {
                    what:'AddressFromHousesTarif',
                    what_id: selected[0].data.house_id
                },
                callback: function(records,operation,success){
                    if(success){
                        form.getForm().findField('address_ot').setValue(records[0].get('address_id'));
                        form.getForm().findField('address_do').setValue(records[0].get('address_id'));
                    }

                },
                scope:this
            });

        }
    },

    onBtAddLgotaPererClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //CONTROLLER
        var value = button.findParentByType('form').getValues();
        //STORE
        if (value.summa !== "0") {
            var stUser = Ext.data.StoreManager.get("StUser");
            var values =stUser.getAt(0);
            var vibor = values.get('vibor');
            this.getWinAddLgotaPerer().close();
            switch (vibor){
                case 'addLgotaVodaPerer':
                    me.addLgotaPererVoda(value);
                    break;
                case 'addLgotaStokiPerer':
                    me.addLgotaPererStoki(value);
                    break;
                case 'addLgotaPtnPerer':
                    me.addLgotaPererPtn(value);
                    break;
                case 'addLgotaOtopleniePerer':
                    me.addLgotaPererOtoplenie(value);
                    break;
                case 'addLgotaKvartplataPerer':
                    me.addLgotaPererKvartplata(value);
                    break;
                case 'addLgotaTboPerer':
                    me.addLgotaPererTbo(value);
                    break;
                case 'addLgotaVoda':
                    me.addLgotaVoda(value);
                    break;
                case 'addLgotaStoki':
                    me.addLgotaStoki(value);
                    break;
                case 'addLgotaPodogrev':
                    me.addLgotaPodogrev(value);
                    break;
                case 'addLgotaOtoplenie':
                    me.addLgotaOtoplenie(value);
                    break;
                case 'addLgotaKvartplata':
                    me.addLgotaKvartplata(value);
                    break;
                case 'addLgotaTbo':
                    me.addLgotaTbo(value);
                    break;
                case 'addLgotaPtn':
                    me.addLgotaPtn(value);
                    break;
                case 'editLgotaVoda':
                    me.editLgotaVoda(value);
                    break;
                case 'editLgotaStoki':
                    me.editLgotaStoki(value);
                    break;
                case 'editLgotaPtn':
                    me.editLgotaPtn(value);
                    break;
                case 'editLgotaOtoplenie':
                    me.editLgotaOtoplenie(value);
                    break;
                case 'editLgotaKvartplata':
                    me.editLgotaKvartplata(value);
                    break;
                case 'editLgotaTbo':
                    me.editLgotaTbo(value);
                    break;
            }
        } else {
            Ext.MessageBox.show({
                title: 'Контроль данных',
                msg: 'Введите правильную сумму',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    onBtAddNachKvClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"nachislenie_kvartplata"
        };


        //LOGIKA
        var myMask= Ext.Msg.show({
            title:'Начисление...',
            msg: 'Начисление квартплаты.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление квартплаты',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление квартплаты',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtAddNachTboClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"nachislenie_tbo"
        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Начисление...',
            msg: 'Начисление ТБО.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление ТБО',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление ТБО',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtAddNachVodaClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"nachislenie_voda"
        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Начисление...',
            msg: 'Начисление по воде и стокам.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление Водоснабжения и Водоотведения',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление Водоснабжения и Водоотведения',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtUpdKubNormaClick: function(button, e, eOpts) {
        // in use
        var me = this;
        var value = button.findParentByType('form').getValues();

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            data:value.data,
            what:"update_kubov_norma"
        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Обновление кубов по норме...',
            msg: 'Обновление кубов по норме.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Обновление кубов по норме',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Обновление кубов по норме',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtAddPererKvClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //LOGIN & PASSWORD



        //LOGIKA
        var grid = Ext.getCmp('grTarifHousesKv');
        //var store = grid.getStore();
        var gridRowSelectedRecords  = grid.getView().getSelectionModel().getSelection();
        var size = Ext.Object.getSize(gridRowSelectedRecords) ;
        var values =stUser.getAt(0);
        var params =[];
        if (size > 1){
            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_kvartplata",
                allkv:value.allkv,
                tarif_manual:0,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        } else {

            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_kvartplata",
                allkv:value.allkv,
                tarif_manual:value.tarif_manual,
                ch_kv9:value.ch_kv9,
                ch_kv16:value.ch_kv16,
                ch_kv9f1:value.ch_kv9f1,
                ch_kv16f1:value.ch_kv16f1,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        }
        var house = "";
        var myMask = Ext.Msg.show({
            title:'Перерасчет по квартплате',
            msg: 'Выполнение перерасчета.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });
        Ext.Object.each(gridRowSelectedRecords, function(key, val, myself) {
            Ext.Object.merge(val.data, params);

            QueryAddress.updateRecords(val.data,function(results){
               // console.log(results);

                if(results.success==="1"){
                    myMask.close();

                    Ext.MessageBox.show({
                        title: 'Перерасчет квартплаты',
                        msg: "Перерасчет квартплаты выполнен",
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                }  else {
                    house =val.data.house;
                    myMask.close();
                    Ext.MessageBox.show({
                        title: 'Перерасчет квартплаты ',
                        msg: "Перерасчет не выполнен по дому "+ house ,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });

                }
            });
        });


    },

    onBtAddPererTboClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //LOGIN & PASSWORD



        //LOGIKA
        var grid = Ext.getCmp('grTarifHousesTbo');
        //var store = grid.getStore();
        var gridRowSelectedRecords  = grid.getView().getSelectionModel().getSelection();
        var values =stUser.getAt(0);
        var size = Ext.Object.getSize(gridRowSelectedRecords) ;
        var params =[];
        if (size > 1){
            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_tbo",
                allkv:value.allkv,
                tarif_manual:0,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        } else {
            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_tbo",
                allkv:value.allkv,
                tarif_manual:value.tarif_manual,
                ch_tbo:value.ch_tbo,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        }
        var res = false;
        var house = "";
        var myMask = Ext.Msg.show({
            title:'Перерасчет по ТБО',
            msg: 'Выполнение перерасчета.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });
        Ext.Object.each(gridRowSelectedRecords, function(key, val, myself) {
            Ext.Object.merge(val.data, params);
             QueryAddress.updateRecords(val.data,function(results){
               // console.log(results);

                if(results.success==="1"){
                    myMask.close();

                    Ext.MessageBox.show({
                        title: 'Перерасчет тбо',
                        msg: "Перерасчет тбо выполнен",
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                }  else {
                    house =val.data.house;
                    myMask.close();
                    Ext.MessageBox.show({
                        title: 'Перерасчет тбо ',
                        msg: "Перерасчет не тбо по дому "+ house ,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });

                }
            });
        });

    },

    onBtAddPererVodaClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //LOGIN & PASSWORD



        //LOGIKA
        var grid = Ext.getCmp('grTarifHousesVoda');
        //var store = grid.getStore();
        var gridRowSelectedRecords  = grid.getView().getSelectionModel().getSelection();
        var size = Ext.Object.getSize(gridRowSelectedRecords) ;
        var values =stUser.getAt(0);
        var params =[];
        if (size > 1){
            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_voda_stoki",
                allkv:value.allkv,
                tarif_manual:0,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        } else {

            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_voda_stoki",
                allkv:value.allkv,
                tarif_manual:value.tarif_manual,
                ch_xv9:value.ch_xv9,
                ch_xv16:value.ch_xv16,
                ch_st9:value.ch_st9,
                ch_st16:value.ch_st16,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        }

        var res = false;
        var house = "";
        var myMask = Ext.Msg.show({
            title:'Перерасчет по воде и стокам',
            msg: 'Выполнение перерасчета.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });
        Ext.Object.each(gridRowSelectedRecords, function(key, val, myself) {
            Ext.Object.merge(val.data, params);
              QueryAddress.updateRecords(val.data,function(results){
               // console.log(results);

                if(results.success==="1"){
                    myMask.close();

                    Ext.MessageBox.show({
                        title: 'Перерасчет по воде и стокам',
                        msg: "Перерасчет по воде и стокам выполнен",
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                }  else {
                    house =val.data.house;
                    myMask.close();
                    Ext.MessageBox.show({
                        title: 'Перерасчет по воде и стокам ',
                        msg: "Перерасчет не выполнен по дому "+ house ,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });

                }
            });
        });



    },

    onBtAddPererPodogrevClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //LOGIN & PASSWORD



        //LOGIKA
        var grid = Ext.getCmp('grTarifHousesPodogrev');
        //var store = grid.getStore();
        var gridRowSelectedRecords  = grid.getView().getSelectionModel().getSelection();
        var size = Ext.Object.getSize(gridRowSelectedRecords) ;
        var values =stUser.getAt(0);
        var params =[];
        if (size > 1){
            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_podogrev",
                allkv:value.allkv,
                tarif_manual:0,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        } else {

            params = {
                login:values.get('login'),
                password:values.get('password'),
                what:"pereraschet_podogrev",
                allkv:value.allkv,
                tarif_manual:value.tarif_manual,
                ch_gv9:value.ch_gv9,
                ch_gv16:value.ch_gv16,
                sdata:value.sdata,
                fdata:value.fdata,
                address_ot:value.address_ot,
                address_do:value.address_do,
                info:value.info
            };
        }
        //console.log(size);

        var res = 1;
        var house = "";
        var myMask = Ext.Msg.show({
            title:'Перерасчет по подогреву',
            msg: 'Выполнение перерасчета.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });
        Ext.Object.each(gridRowSelectedRecords, function(key, val, myself) {
            Ext.Object.merge(val.data, params);
            QueryAddress.updateRecords(val.data,function(results){
                // console.log(results);

                if(results.success==="1"){
                    myMask.close();

                    Ext.MessageBox.show({
                        title: 'Перерасчет подогрев',
                        msg: "Перерасчет подогрев выполнен",
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                }  else {
                    house =val.data.house;
                    myMask.close();
                    Ext.MessageBox.show({
                        title: 'Перерасчет подогрев ',
                        msg: "Перерасчет не выполнен по дому "+ house ,
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });

                }
            });
        });


    },

    onBtExportBudjetClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        //var winExportLgota = Ext.ClassManager.instantiateByAlias('widget.winexportlgota');
        var win = button.findParentByType('window');
        var form = button.findParentByType('form');
        var vibor = form.getForm().findField('vibor').getValue();
        var what = "ExportEmail";
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");


        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:what,

        };
        //console.log(value);

        //LOGIKA

        Ext.Object.merge(value, params);
        //LOGIKA

        var myMask = Ext.Msg.show({
            title:'Отправка почты...',
            msg: 'Отправка файла по Email.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });
        //console.log(value);

        QueryExport.exportToEmail(value,function(results){
            if(results.success){
                myMask.close();
                win.close();
                Ext.MessageBox.show({
                    title: 'Отправка файла по Email',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });

            } else {
                myMask.close();
                win.close();

                Ext.MessageBox.show({
                    title: 'Отправка файла по Email',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });

            }

        });

    },

    onBtControlLgotClick: function(button, e, eOpts) {
        // in use
        var value = button.findParentByType('form').getValues();
        var tabPnCenter =  Ext.getCmp('tabPnCenter');
        var report = 'controlLgot';
        var namereport = 'Контроль льгот';
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var tab = tabPnCenter.child('#'+report);
        if (!tab) {
            tab  = tabPnCenter.add({
                xtype:'tabReportOrg',
                title:namereport,
                id:''+report+''
            });

        }
        var reppan = tab.getComponent(0);
        tabPnCenter.setActiveTab(tab);

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"controlLgot",
            report:report
        };

        //LOGIKA
        Ext.Object.merge(value, params);

        var myMask = Ext.Msg.show({
            title:'Отчеты...',
            msg: 'Загрузка отчета.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryReport.getResults(value,function(results){
            if (results.success==="1"){
                myMask.close();
                reppan.update(results.content);
                Ext.REPORTCONTENT =results.content;
                Ext.REPORTSQL =results.sql;
                Ext.REPORTTITLE =report;
            }else{
                myMask.close();
                Ext.MessageBox.show({title: namereport,
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });


    },

    onBtControlDbfLgotClick: function(button, e, eOpts) {
        // in use

        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StDbfLgota = Ext.data.StoreManager.get("StDbfLgota");

        //COMPONENT
        var form = button.findParentByType('form');
        var value = form.getValues();

        var tabPnCenter =  Ext.getCmp('tabPnCenter');
        var tab = tabPnCenter.child('#tabDbfLgota');
        var usluga =form.getForm().findField('rbUsluga').inputValue;
        StDbfLgota.proxy.setExtraParam('what', usluga);

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"ExportBudjetEmail"
        };
        //LOGIKA
        Ext.Object.merge(value, params);

        var myMask = Ext.Msg.show({
            title:'Загрузка ДБФ файла',
            msg: 'Загрузка ДБФ файла со списком льготников.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });


        QueryAddress.updateRecords(value,function(result){
            if(result.success==="1"){
                StDbfLgota.load({
                    params: {
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            if (!tab) {
                                tab  = tabPnCenter.add({
                                    xtype:'tabDbfLgota'
                                });

                            }
                            myMask.close();
                            tabPnCenter.setActiveTab(tab);

                        }else {
                            myMask.close();

                        }
                    },
                    scope:this
                });

            } else {
                myMask.close();

                Ext.MessageBox.show({
                    title: 'Загрузка ДБФ файла ',
                    msg: result.msg,
                    buttons: Ext.MessageBox.OK,

                    icon: Ext.MessageBox.ERROR
                });

            }
        });

    },

    onBtFixDolgClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var value = button.findParentByType('form').getValues();
        //console.log(value);
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"fixDolgTeplo",
            fdata:value.fixdata

        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Фиксация задолженности...',
            msg: 'Фиксация задолженности.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Фиксация задолженности',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Фиксация задолженности',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtEditOplataClick: function(button, e, eOpts) {
        /// in use
        //CONTROLLER
        var value = button.findParentByType('form').getValues();
        var form = button.findParentByType('form');
        var oplata = 0;
        var kvartplata = form.getForm().findField('kvartplata').getValue();
        var remont = form.getForm().findField('remont').getValue();

        var otoplenie = form.getForm().findField('otoplenie').getValue();
        var ptn = form.getForm().findField('ptn').getValue();

        var podogrev = form.getForm().findField('podogrev').getValue();
        var voda = form.getForm().findField('voda').getValue();
        var stoki = form.getForm().findField('stoki').getValue();
        var tbo = form.getForm().findField('tbo').getValue();
        var summa = parseFloat(form.getForm().findField('summa').getValue()).toFixed(2);
        oplata =parseFloat(kvartplata + remont+ otoplenie + ptn +  podogrev + voda + stoki + tbo).toFixed(2);
        //console.log(summa);
        //console.log(oplata);

        if(summa === oplata) {
            if (summa !== "0") {
                var stUser = Ext.data.StoreManager.get("StUser");
                var values =stUser.getAt(0);
                var vibor = values.get('vibor');
                this.getWinEditOplata().close();
                this.editOplataApp(value);

            } else {
                Ext.MessageBox.show({
                    title: 'Контроль данных',
                    msg: 'Оплата равна 0',
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        } else {
            Ext.MessageBox.show({
                title: 'Контроль данных',
                msg: 'Не совпадают правая и левая части оплаты',
                buttons: Ext.MessageBox.OK,
                icon: Ext.MessageBox.ERROR
            });
        }
    },

    onBtNachiKredittOplataClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var value = button.findParentByType('form').getValues();
        //console.log(value);
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"NachOplataKredit",
            fdata:value.data

        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Начисление рассрочки...',
            msg: 'Начисление рассрочки.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление рассрочки',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление рассрочки',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onBtEditDbfLgotaClick: function(button, e, eOpts) {
        var value = button.findParentByType('form').getValues();
        var dataNachDbfLgota = Ext.getCmp('dataNachDbfLgota');
        var StDbfLgota = Ext.data.StoreManager.get("StDbfLgota");
        var stUser = Ext.data.StoreManager.get("StUser");
        var values =stUser.getAt(0);
        var vibor = value.vibor;
        var org_id =values.get('org_id');


        this.getWinEditDbfLgota().close();
        var what = "editDbfLgota";

        switch (vibor) {
            case "add":
                what = "addDbfLgota";
                break;
            case "edit":
                what ="editDbfLgota";
        }
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            org_id:org_id,
            what:what
        };

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StDbfLgota.load({
                    params: {
                        login:values.get('login'),
                        password:values.get('password'),
                        data:dataNachDbfLgota.getValue(),
                        org_id:org_id,
                        what:"getDbfLgota"

                    },
                    scope:this
                });

            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по льготе',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

                        });
    },

    onBtAddNachPtnClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"nachislenie_ptn"
        };


        //LOGIKA

        var myMask= Ext.Msg.show({
            title:'Начисление...',
            msg: 'Начисление ПТН.Ожидайте...',
            buttons: Ext.Msg.CANCEL,
            wait: true,
            modal: true,
            icon: Ext.Msg.INFO
        });

        QueryAddress.updateRecords(params,function(results){
            if(results.success==="1"){
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление ПТН',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
            } else {
                myMask.close();
                Ext.MessageBox.show({
                    title: 'Начисление ПТН',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onPrintDogRestrVodaClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var stDogovor = Ext.data.StoreManager.get("StDogovor");
        //var stAppartment = Ext.data.StoreManager.get("StAppartment");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:values.get('vibor')
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if (results.success==='1'){

                stDogovor.removeAll();
                stDogovor.load({
                    params: {
                        dog_id:value.dog_id,
                        address_id: value.address_id,
                        what:'getDogovorRestrVik',
                        login:value.login,
                        password:value.password
                    },
                                scope:this

                });
                 Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                me.onTabAppBtiActivate();
            } else {
                Ext.MessageBox.show({
                    title: 'Договора',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        });

    },

    addLgotaPererVoda: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppVoda');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererVoda"
        };

        //GRID
        var grNach = Ext.getCmp('grNachVoda');

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'VodaApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPererStoki: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppStoki');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererStoki"
        };

        //GRID
        var grNach = Ext.getCmp('grNachStoki');

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'StokiApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPererPtn: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppPtn');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererPtn"
        };

        //GRID
        var grNach = Ext.getCmp('grNachPtn');

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'PtnApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPererOtoplenie: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppOtoplenie');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererOtoplenie"
        };

        //GRID
        var grNach = Ext.getCmp('grNachOtoplenie');
        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'OtoplenieApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPererKvartplata: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppKvartplata');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererKvartplata"
        };

        //GRID
        var grNach = Ext.getCmp('grNachKvartplata');

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'KvartplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPererTbo: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppTbo');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPererTbo"
        };

        //GRID
        var grNach = Ext.getCmp('grNachTbo');

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'TboApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(0);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод перерасчета на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaVoda: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppVoda');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaVoda"
        };

        //GRID
        var grNach = Ext.getCmp('grNachVoda');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'VodaApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaStoki: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppStoki');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaStoki"
        };

        //GRID
        var grNach = Ext.getCmp('grNachStoki');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'StokiApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaPtn: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppPtn');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaPtn"
        };

        //GRID
        var grNach = Ext.getCmp('grNachPtn');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'PtnApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaOtoplenie: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppOtoplenie');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaOtoplenie"
        };

        //GRID
        var grNach = Ext.getCmp('grNachOtoplenie');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'OtoplenieApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaKvartplata: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppKvartplata');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaKvartplata"
        };

        //GRID
        var grNach = Ext.getCmp('grNachKvartplata');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'KvartplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    editLgotaTbo: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppTbo');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"editLgotaTbo"
        };

        //GRID
        var grNach = Ext.getCmp('grNachTbo');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'TboApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaVoda: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppVoda');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaVoda"
        };

        //GRID
        var grNach = Ext.getCmp('grNachVoda');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA
        Ext.Object.merge(value, params);
        //console.log(value.ind);

        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'VodaApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaStoki: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppStoki');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaStoki"
        };

        //GRID
        var grNach = Ext.getCmp('grNachStoki');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'StokiApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPodogrev: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppPodogrev');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPodogrev"
        };

        //GRID
        var grNach = Ext.getCmp('grNachPodogrev');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'PodogrevApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaOtoplenie: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppOtoplenie');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaOtoplenie"
        };

        //GRID
        var grNach = Ext.getCmp('grNachOtoplenie');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'OtoplenieApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaKvartplata: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppKvartplata');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaKvartplata"
        };

        //GRID
        var grNach = Ext.getCmp('grNachKvartplata');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'KvartplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaTbo: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppTbo');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaTbo"
        };

        //GRID
        var grNach = Ext.getCmp('grNachTbo');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'TboApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    addLgotaPtn: function(value) {
        // in use
        var me = this;
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StTekNachApp = Ext.data.StoreManager.get("StTekNachApp");
        var form = Ext.getCmp('tabFmAppPtn');

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            address_id:values.get('address_id'),
            address:values.get('address'),
            what:"addLgotaPtn"
        };

        //GRID
        var grNach = Ext.getCmp('grNachPtn');
        var valueNachisl  = grNach.getView().getSelectionModel().getSelection()[0];
        var ind  = grNach.getView().getStore().indexOf(valueNachisl);

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StTekNachApp.load({
                    params: {
                        what:'PtnApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    callback: function(records,operation,success){
                        if(success){
                            grNach.getView().getSelectionModel().select(ind);

                        }else{
                            form.getForm().reset();
                        }
                    },
                    scope:this
                });


            } else {
                Ext.MessageBox.show({
                    title: 'Ввод начисления на бюджет',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    importZarplataPort: function() {
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        //console.log(stUser);

        var StPort = Ext.data.StoreManager.get("StPort");
        //LOGIN & PASSWORD
        var values =stUser.getAt(0);

        StPort.load({
            params: {
                what:'port',
                login:values.get('login'),
                password:values.get('password')
            }
        });


    },

    editOplataApp: function(value) {
        // in use
        //STORE
        var stUser = Ext.data.StoreManager.get("StUser");
        var StOplata = Ext.data.StoreManager.get("StOplata");

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"editOplataApp"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StOplata.load({
                    params: {
                        what:'OplataApp',
                        address_id: values.get('address_id'),
                        login:values.get('login'),
                        password:values.get('password')
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Редактирование записи  по оплате',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });

    }

});
