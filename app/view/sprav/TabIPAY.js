/*
 * File: app/view/sprav/TabIPAY.js
 * Date: Fri Sep 25 2020 00:36:15 GMT+0300 (EEST)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ykis.view.sprav.TabIPAY', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.tabipay',

    requires: [
        'Ykis.view.sprav.TabIPAYViewModel',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Separator',
        'Ext.form.field.Date',
        'Ext.form.field.Hidden',
        'Ext.grid.column.Action',
        'Ext.grid.column.Number',
        'Ext.grid.column.Date',
        'Ext.form.field.Number',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.CheckboxModel',
        'Ext.grid.feature.GroupingSummary',
        'Ext.grid.feature.Summary'
    ],

    viewModel: {
        type: 'tabipay'
    },
    height: 800,
    id: 'tabIPAY',
    scrollable: true,
    layout: 'fit',
    closable: true,
    title: 'Оплата IPAY',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            id: 'grIPAY',
            scrollable: true,
            collapseFirst: false,
            title: '',
            store: 'StIPAY',
            viewConfig: {
                getRowClass: function(record, rowIndex, rowParams, store) {

                    if(record.get('pr') === 1 ){

                        return 'change_color_yellow';
                    }
                    else if(record.get('pr') === 5 ){
                        return  'change_color_green';

                    } else  {
                        return  'change_color_red';
                    }

                },
                emptyText: 'Платежи не загружены',
                selectedItemCls: 'x-grid-item-selected change_color_pb'
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    height: 45,
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                var data =  Ext.getCmp('search_date_ipay').getValue();
                                var StIPAY = Ext.data.StoreManager.get("StIPAY");

                                var stUser = Ext.data.StoreManager.get("StUser");

                                //LOGIN & PASSWORD
                                var values =stUser.getAt(0);
                                var value = {
                                    login:values.get('login'),
                                    password:values.get('password'),
                                    data:data,
                                    what:"delOplataIpayEmpty"
                                };


                                Ext.MessageBox.confirm({
                                    title: 'Удаление записи',
                                    msg: 'Вы удаляете записи об оплате  <br> Подтвердите или отмените свои действия.',
                                    buttons: Ext.MessageBox.OKCANCEL,
                                    icon: Ext.MessageBox.ERROR,
                                    buttonText:{
                                        ok:'подтвеждаю',
                                        cancel:'отмена'
                                    },
                                    fn:function(btn,newValue){
                                        if(btn=='ok'){
                                            QueryKassa.delOplata(value,function(results){
                                                if(results.success==="1"){
                                                    Ext.MessageBox.show({
                                                        title: 'Удаление записи об оплате ',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.INFO
                                                    });
                                                    StIPAY.load({
                                                        params: {
                                                            what:'getIPAYdata',
                                                            data:data,
                                                            login:values.get('login'),
                                                            password:values.get('password')
                                                        }
                                                    });

                                                } else {
                                                    Ext.MessageBox.show({
                                                        title: 'Удаление записи об оплате',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.ERROR
                                                    });
                                                }
                                            });
                                        }
                                    }
                                });

                            },
                            icon: 'resources/css/images/ico/s_error.png',
                            text: '',
                            tooltip: 'Удалить пустые записи',
                            tooltipType: 'title'
                        },
                        {
                            xtype: 'tbseparator',
                            width: 20
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'datefield',
                            id: 'search_date_ipay',
                            width: 200,
                            fieldLabel: 'Поиск по дате',
                            labelWidth: 80,
                            format: 'd-m-Y',
                            submitFormat: 'Ymd',
                            listeners: {
                                change: 'onDatefieldChange'
                            }
                        },
                        {
                            xtype: 'tbseparator'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, event) {
                                var stUser = Ext.data.StoreManager.get("StUser");
                                var StIPAY = Ext.data.StoreManager.get("StIPAY");
                                var data =  Ext.getCmp('search_date_ipay').getValue();

                                var values =stUser.getAt(0);
                                StIPAY.load({
                                    params: {
                                        what:'getIPAY',
                                        data:data,
                                        login:values.get('login'),
                                        password:values.get('password')
                                    }
                                });

                            },
                            disabled: true,
                            height: 25,
                            id: 'btnUpdateIPAYReestr',
                            width: 126,
                            icon: 'resources/css/images/ico/xsldbg_refresh.png',
                            text: 'Оновить  дані'
                        },
                        {
                            xtype: 'button',
                            height: 25,
                            id: 'IPAYKassaYKIS',
                            width: 167,
                            icon: 'resources/css/images/ico/printer.png',
                            text: 'Реестр по адресам ЮКИС'
                        },
                        {
                            xtype: 'button',
                            height: 25,
                            id: 'IPAYKassaYKISdata',
                            width: 167,
                            icon: 'resources/css/images/ico/printer.png',
                            text: 'Реестр по дате ЮКИС'
                        },
                        {
                            xtype: 'button',
                            height: 25,
                            id: 'IPAYKassaOSBB',
                            width: 167,
                            icon: 'resources/css/images/ico/printer.png',
                            text: 'Реестр по ОСББ'
                        },
                        {
                            xtype: 'hiddenfield',
                            fieldLabel: 'Label',
                            name: 'usluga'
                        }
                    ]
                }
            ],
            columns: [
                {
                    xtype: 'actioncolumn',
                    width: 30,
                    menuDisabled: true,
                    tooltip: 'Удалить запись',
                    tooltipType: 'title',
                    altText: 'Удалить запись',
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                // in use
                                var me = this;
                                //STORE

                                var stUser = Ext.data.StoreManager.get("StUser");
                                var grid = view.findParentByType('grid');
                                var data =  Ext.getCmp('search_date_ipay').getValue();

                                var store = view.getStore();
                                var plugin = grid.getPlugin('rowEditIpay');
                                plugin.cancelEdit();

                                //LOGIN & PASSWORD
                                var values =stUser.getAt(0);
                                var params = {
                                    login:values.get('login'),
                                    password:values.get('password'),
                                    address_id:values.get('address_id'),
                                    address:values.get('address'),
                                    what:"delOplataIpay"
                                };

                                //GRID
                                var value = record.data;


                                //LOGIKA


                                Ext.Object.merge(value, params);

                                Ext.MessageBox.confirm({
                                    title: 'Удаление записи',
                                    msg: 'Вы удаляете запись об оплате  <br> Подтвердите или отмените свои действия.',
                                    buttons: Ext.MessageBox.OKCANCEL,
                                    icon: Ext.MessageBox.ERROR,
                                    buttonText:{
                                        ok:'подтвеждаю',
                                        cancel:'отмена'
                                    },
                                    fn:function(btn,newValue){
                                        if(btn=='ok'){
                                            QueryKassa.delOplata(value,function(results){
                                                if(results.success==="1"){
                                                    Ext.MessageBox.show({
                                                        title: 'Удаление записи об оплате ',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.INFO
                                                    });
                                                    store.load({
                                                        params: {
                                                            what:'getIPAY',
                                                            data:data,
                                                            login:values.get('login'),
                                                            password:values.get('password')
                                                        },
                                                        scope:this
                                                    });

                                                } else {
                                                    Ext.MessageBox.show({
                                                        title: 'Удаление записи об оплате',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.ERROR
                                                    });
                                                }
                                            });
                                        }
                                    }
                                });
                            },
                            getClass: function(v, metadata, r, rowIndex, colIndex, store) {
                                var pr = r.get('pr');

                                if (pr === 5 ) {
                                    metaData = 'x-grid-center-icon';
                                }  else if (pr !== 5 ) {
                                    metaData = 'x-hide-display';

                                }
                                return metaData;
                            },
                            icon: 'resources/css/images/ico/no.png'
                        },
                        {
                            handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                // in use
                                var me = this;
                                //STORE

                                var stUser = Ext.data.StoreManager.get("StUser");
                                var grid = view.findParentByType('grid');
                                var data =  Ext.getCmp('search_date_ipay').getValue();

                                var store = view.getStore();
                                var plugin = grid.getPlugin('rowEditIpay');
                                plugin.cancelEdit();

                                //LOGIN & PASSWORD
                                var values =stUser.getAt(0);
                                var params = {
                                    login:values.get('login'),
                                    password:values.get('password'),
                                    address_id:values.get('address_id'),
                                    address:values.get('address'),
                                    what:"ipay_oplata_add"
                                };

                                //GRID
                                var value = record.data;


                                //LOGIKA


                                Ext.Object.merge(value, params);

                                Ext.MessageBox.confirm({
                                    title: 'Ввод  записи в оплату',
                                    msg: 'Ввод  записи в оплату  <br> Подтвердите или отмените свои действия.',
                                    buttons: Ext.MessageBox.OKCANCEL,
                                    icon: Ext.MessageBox.ERROR,
                                    buttonText:{
                                        ok:'подтвеждаю',
                                        cancel:'отмена'
                                    },
                                    fn:function(btn,newValue){
                                        if(btn=='ok'){
                                            QueryKassa.delOplata(value,function(results){
                                                if(results.success==="1"){
                                                    Ext.MessageBox.show({
                                                        title: 'Ввод  записи в оплату ',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.INFO
                                                    });
                                                    store.load({
                                                        params: {
                                                            what:'getIPAY',
                                                            data:data,
                                                            login:values.get('login'),
                                                            password:values.get('password')
                                                        },
                                                        scope:this
                                                    });

                                                } else {
                                                    Ext.MessageBox.show({
                                                        title: 'Ввод  записи в оплату',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.ERROR
                                                    });
                                                }
                                            });
                                        }
                                    }
                                });
                            },
                            getClass: function(v, metadata, r, rowIndex, colIndex, store) {
                                var pr = r.get('pr');

                                if (pr !==5 ) {
                                    metaData = 'x-grid-center-icon';
                                }  else if (pr === 5 ) {
                                    metaData = 'x-hide-display';

                                }
                                return metaData;
                            },
                            icon: 'resources/css/images/ico/add.png'
                        }
                    ]
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    width: 60,
                    dataIndex: 'payment_id',
                    menuDisabled: true,
                    text: 'Запись',
                    format: '0'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    width: 60,
                    dataIndex: 'period',
                    menuDisabled: true,
                    text: 'Период',
                    format: '0'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    width: 55,
                    dataIndex: 'raion_id',
                    menuDisabled: true,
                    text: 'Район',
                    format: '0'
                },
                {
                    xtype: 'datecolumn',
                    width: 80,
                    dataIndex: 'data',
                    menuDisabled: true,
                    text: 'Дата',
                    format: 'd-m-Y'
                },
                {
                    xtype: 'numbercolumn',
                    items: {
                        xtype: 'textfield',
                        flex: 1,
                        margin: 2,
                        enableKeyEvents: true,
                        listeners: {
                            keyup: function() {
                                            var store = this.up('tablepanel').store;
                                            store.clearFilter();
                                            if (this.value) {
                                                store.filter({
                                                    property     : 'pay_id',
                                                    value         : this.value,
                                                    anyMatch      : true,
                                                    caseSensitive : false
                                                });
                                            }
                                        },
                            buffer: 1000
                        }
                    },
                    width: 85,
                    dataIndex: 'pay_id',
                    menuDisabled: true,
                    text: 'Ид платежа',
                    format: '0'
                },
                {
                    xtype: 'numbercolumn',
                    items: {
                        xtype: 'textfield',
                        flex: 1,
                        margin: 2,
                        enableKeyEvents: true,
                        listeners: {
                            keyup: function() {
                                            var store = this.up('tablepanel').store;
                                            store.clearFilter();
                                            if (this.value) {
                                                store.filter({
                                                    property     : 'address_id',
                                                    value         : this.value,
                                                    anyMatch      : true,
                                                    caseSensitive : false
                                                });
                                            }
                                        },
                            buffer: 1000
                        }
                    },
                    width: 50,
                    dataIndex: 'address_id',
                    menuDisabled: true,
                    text: 'лс',
                    format: '0'
                },
                {
                    xtype: 'gridcolumn',
                    items: {
                        xtype: 'textfield',
                        flex: 1,
                        margin: 2,
                        enableKeyEvents: true,
                        listeners: {
                            keyup: function() {
                                            var store = this.up('tablepanel').store;
                                            store.clearFilter();
                                            if (this.value) {
                                                store.filter({
                                                    property     : 'address',
                                                    value         : this.value,
                                                    anyMatch      : true,
                                                    caseSensitive : false
                                                });
                                            }
                                        },
                            buffer: 1000
                        }
                    },
                    width: 125,
                    dataIndex: 'address',
                    menuDisabled: true,
                    text: 'Адрес'
                },
                {
                    xtype: 'gridcolumn',
                    items: {
                        xtype: 'textfield',
                        flex: 1,
                        margin: 2,
                        enableKeyEvents: true,
                        listeners: {
                            keyup: function() {
                                            var store = this.up('tablepanel').store;
                                            store.clearFilter();
                                            if (this.value) {
                                                store.filter({
                                                    property     : 'fio',
                                                    value         : this.value,
                                                    anyMatch      : true,
                                                    caseSensitive : false
                                                });
                                            }
                                        },
                            buffer: 1000
                        }
                    },
                    width: 120,
                    dataIndex: 'fio',
                    menuDisabled: true,
                    text: 'Ф.И.О'
                },
                {
                    xtype: 'numbercolumn',
                    width: 40,
                    dataIndex: 'pr',
                    menuDisabled: true,
                    text: 'Пр',
                    format: '0',
                    editor: {
                        xtype: 'numberfield'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 70,
                    dataIndex: 'kvartplata',
                    menuDisabled: true,
                    text: 'Кварт'
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 70,
                    dataIndex: 'voda',
                    menuDisabled: true,
                    text: 'Вода'
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 70,
                    dataIndex: 'stoki',
                    menuDisabled: true,
                    text: 'Стоки'
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 75,
                    dataIndex: 'otoplenie',
                    menuDisabled: true,
                    text: 'Отопл'
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 70,
                    dataIndex: 'ptn',
                    menuDisabled: true,
                    text: 'ПТН'
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 60,
                    dataIndex: 'tbo',
                    menuDisabled: true,
                    text: 'ТБО'
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data) {
                        var n =Ext.util.Format.number(val,'0,000.00');
                        if (val >= 0) {
                            return '<span style="color:#000; font-weight:bold;">' + n + '</span>';
                        } else  {
                            return '<span style="color:red; font-weight:bold;">' + n + '</span>';
                        }
                    },
                    summaryType: 'sum',
                    width: 90,
                    dataIndex: 'summa',
                    menuDisabled: true,
                    text: 'Сумма'
                },
                {
                    xtype: 'datecolumn',
                    width: 87,
                    dataIndex: 'data_in',
                    menuDisabled: true,
                    text: 'дата_опл',
                    format: 'd-m-Y h:m:s'
                }
            ],
            plugins: [
                {
                    ptype: 'rowediting',
                    pluginId: 'rowEditIpay',
                    listeners: {
                        edit: 'onRowEditingEdit'
                    }
                }
            ],
            selModel: {
                selType: 'checkboxmodel',
                mode: 'SINGLE'
            },
            features: [
                {
                    ftype: 'groupingsummary',
                    id: 'groupPB',
                    startCollapsed: true
                },
                {
                    ftype: 'summary',
                    dock: 'top'
                }
            ]
        }
    ],

    onDatefieldChange: function(field, newValue, oldValue, eOpts) {
        var stUser = Ext.data.StoreManager.get("StUser");
        var StIPAY = Ext.data.StoreManager.get("StIPAY");
        var values =stUser.getAt(0);
        var btnUpdateIPAYReestr =  Ext.getCmp('btnUpdateIPAYReestr');
        btnUpdateIPAYReestr.setDisabled(false);
        StIPAY.load({
            params: {
                what:'getIPAYdata',
                data:newValue,
                login:values.get('login'),
                password:values.get('password')
            }
        });

    },

    onRowEditingEdit: function(editor, context, eOpts) {
        var grid = editor.grid;
        var store = grid.getStore();
        var sm = store.getUpdatedRecords();
        var data = grid.getSelectionModel();
        if(sm.length) {

            store.sync({

                success: function(){
                    store.load();
                },
                scope:this
            });
        }

    }

});