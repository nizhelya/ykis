/*
 * File: app/view/sprav/TabNewAddress.js
 * Date: Tue May 12 2020 01:39:10 GMT+0300 (EEST)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ykis.view.sprav.TabNewAddress', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.tabnewaddress',

    requires: [
        'Ykis.view.sprav.TabNewAddressViewModel',
        'Ext.form.Panel',
        'Ext.form.FieldSet',
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.form.field.Checkbox',
        'Ext.form.field.Date',
        'Ext.form.field.Number',
        'Ext.form.Label',
        'Ext.form.field.Hidden'
    ],

    viewModel: {
        type: 'tabnewaddress'
    },
    id: 'tabNewAddress',
    layout: 'fit',
    closable: true,
    title: 'Новый адрес',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'form',
            height: 20,
            id: 'fmNewAddress',
            scrollable: true,
            layout: 'absolute',
            bodyPadding: 10,
            title: '',
            items: [
                {
                    xtype: 'fieldset',
                    x: 25,
                    y: 25,
                    height: 195,
                    style: 'background-color: #e0e0e0;',
                    width: 220,
                    layout: 'absolute',
                    title: 'Ввод нового района',
                    items: [
                        {
                            xtype: 'combobox',
                            x: 15,
                            y: 100,
                            width: 175,
                            fieldLabel: 'Выбор района',
                            labelAlign: 'top',
                            labelWidth: 50,
                            name: 'raion_id',
                            displayField: 'raion',
                            queryMode: 'local',
                            store: 'StRaionOrg',
                            valueField: 'raion_id',
                            listeners: {
                                select: 'onComboboxSelect'
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 20,
                            y: 5,
                            width: 175,
                            fieldLabel: 'Новый район',
                            labelAlign: 'top',
                            name: 'newRaion',
                            validateBlank: true,
                            listeners: {
                                change: 'onTextfieldChange1'
                            }
                        },
                        {
                            xtype: 'button',
                            x: 20,
                            y: 60,
                            formBind: false,
                            disabled: true,
                            height: 30,
                            id: 'btAddRaion',
                            width: 175,
                            icon: 'resources/css/images/ico/add.png',
                            text: 'Добавить новый район',
                            listeners: {
                                click: 'onBtAddRaionClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    x: 265,
                    y: 25,
                    height: 195,
                    style: 'background-color: #e0e0e0;',
                    width: 280,
                    layout: 'absolute',
                    title: 'Ввод новой улицы',
                    items: [
                        {
                            xtype: 'combobox',
                            x: 5,
                            y: 100,
                            disabled: true,
                            width: 195,
                            fieldLabel: 'Выбор улицы',
                            labelAlign: 'top',
                            labelWidth: 50,
                            name: 'street_id',
                            displayField: 'street',
                            queryMode: 'local',
                            store: 'StStreetOrg',
                            valueField: 'street_id',
                            listeners: {
                                select: 'onComboboxSelect1'
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 0,
                            y: 5,
                            width: 120,
                            fieldLabel: 'Новая улица',
                            labelAlign: 'top',
                            name: 'newStreet',
                            validateOnChange: false,
                            listeners: {
                                change: 'onTextfieldChange2'
                            }
                        },
                        {
                            xtype: 'button',
                            x: 5,
                            y: 60,
                            formBind: false,
                            disabled: true,
                            height: 30,
                            id: 'btAddStreet',
                            width: 245,
                            icon: 'resources/css/images/ico/add.png',
                            text: 'Добавить новую улицу',
                            listeners: {
                                click: 'onBtAddStreetClick'
                            }
                        },
                        {
                            xtype: 'combobox',
                            x: 190,
                            y: 5,
                            width: 60,
                            fieldLabel: 'аббр',
                            labelAlign: 'top',
                            name: 'abbr',
                            value: 'ул.',
                            displayField: 'abbr',
                            store: 'StAbbr',
                            valueField: 'abbr'
                        },
                        {
                            xtype: 'checkboxfield',
                            x: 130,
                            y: 25,
                            fieldLabel: '',
                            name: 'privat',
                            boxLabel: 'частн',
                            checked: true,
                            inputValue: '1',
                            uncheckedValue: '0'
                        },
                        {
                            xtype: 'checkboxfield',
                            handler: function(checkbox, checked) {
                                // in use
                                var me = this;
                                //STORE
                                var StStreet = Ext.data.StoreManager.get("StStreetOrg");
                                var StHouses = Ext.data.StoreManager.get("StHousesOrg");
                                var StAddress = Ext.data.StoreManager.get("StAddressOrg");

                                var stUser = Ext.data.StoreManager.get("StUser");
                                var  form = checkbox.findParentByType('form');
                                var  cbStreet = form.getForm().findField('street_id');
                                var  cbHouse = form.getForm().findField('house_id');
                                var  cbAddress = form.getForm().findField('address');
                                var  newStreet = form.getForm().findField('newStreet');
                                var  newhouse = form.getForm().findField('newhouse');
                                var  nomer = form.getForm().findField('nomer');


                                var  showHouses = Ext.getCmp('showHouses');
                                var  showStreet = Ext.getCmp('showStreet');
                                var  btAddAddress = Ext.getCmp('btAddAddress');
                                var  btAddHouse = Ext.getCmp('btAddHouse');
                                var  btAddStreet = Ext.getCmp('btAddStreet');




                                var value = form.getValues();

                                //LOGIN & PASSWORD
                                var values =stUser.getAt(0);
                                var params = {
                                    login:values.get('login'),
                                    password:values.get('password')
                                };

                                //LOGIKA
                                StStreet.removeAll();
                                StHouses.removeAll();
                                StAddress.removeAll();
                                cbStreet.clearValue();
                                cbHouse.clearValue();
                                cbAddress.clearValue();
                                btAddAddress.setDisabled(true);
                                btAddHouse.setDisabled(true);
                                btAddStreet.setDisabled(true);

                                newhouse.setValue("");
                                nomer.setValue("");
                                newStreet.setValue("");
                                StStreet.load({
                                    params: {
                                        what:'street',
                                        what_id: 0
                                    },
                                    callback: function(records,operation,success){
                                        if(success){
                                            cbAddress.setDisabled(true);
                                            cbStreet.setDisabled(false);

                                        }
                                    },
                                    scope:this
                                });
                            },
                            x: 210,
                            y: 120,
                            fieldLabel: '',
                            name: 'allStreet',
                            boxLabel: 'Все',
                            inputValue: '1',
                            uncheckedValue: '0'
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    x: 550,
                    y: 25,
                    height: 240,
                    style: 'background-color: #e0e0e0;',
                    width: 235,
                    layout: 'absolute',
                    title: 'Ввод нового дома',
                    items: [
                        {
                            xtype: 'combobox',
                            x: 10,
                            y: 95,
                            disabled: true,
                            width: 200,
                            fieldLabel: 'Выбор дома',
                            labelAlign: 'top',
                            labelWidth: 50,
                            name: 'house_id',
                            displayField: 'house',
                            forceSelection: true,
                            queryMode: 'local',
                            store: 'StHousesOrg',
                            valueField: 'house_id',
                            listeners: {
                                select: 'onComboboxSelect2'
                            }
                        },
                        {
                            xtype: 'button',
                            x: 10,
                            y: 60,
                            formBind: false,
                            disabled: true,
                            height: 30,
                            id: 'btAddHouse',
                            width: 200,
                            icon: 'resources/css/images/ico/add.png',
                            text: 'Добавить новый дом',
                            listeners: {
                                click: 'onBtAddHouseClick'
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 10,
                            y: 0,
                            width: 135,
                            fieldLabel: 'Новый дом',
                            labelAlign: 'top',
                            name: 'newhouse'
                        },
                        {
                            xtype: 'textfield',
                            x: 0,
                            y: 180,
                            disabled: true,
                            width: 170,
                            fieldLabel: 'ОСМД',
                            hideLabel: true,
                            labelWidth: 50,
                            name: 'newOsmd',
                            listeners: {
                                change: 'onTextfieldChange3'
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 150,
                            y: 0,
                            width: 60,
                            fieldLabel: 'Номер',
                            labelAlign: 'top',
                            labelWidth: 50,
                            name: 'nomer',
                            listeners: {
                                validitychange: 'onTextfieldValidityChange2',
                                change: 'onTextfieldChange'
                            }
                        },
                        {
                            xtype: 'checkboxfield',
                            x: 10,
                            y: 155,
                            disabled: true,
                            fieldLabel: '',
                            name: 'osmd',
                            boxLabel: 'добавить в ОСМД',
                            inputValue: '1',
                            uncheckedValue: '0',
                            listeners: {
                                change: 'onCheckboxfieldChange'
                            }
                        },
                        {
                            xtype: 'button',
                            x: 180,
                            y: 175,
                            formBind: false,
                            disabled: true,
                            height: 30,
                            id: 'btAddOsmd',
                            width: 30,
                            icon: 'resources/css/images/ico/add.png',
                            text: '',
                            listeners: {
                                click: 'onBtAddOsmdClick'
                            }
                        }
                    ]
                },
                {
                    xtype: 'fieldset',
                    x: 40,
                    y: 270,
                    height: 250,
                    style: 'background-color: #e0e0e0;',
                    width: 745,
                    layout: 'absolute',
                    title: 'Ввод нового адреса',
                    items: [
                        {
                            xtype: 'fieldset',
                            x: 305,
                            y: 5,
                            height: 145,
                            style: 'background-color: #f1eeee;',
                            width: 410,
                            layout: 'absolute',
                            title: 'Потребляемые коммунальные услуги',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    x: 280,
                                    y: 10,
                                    fieldLabel: '',
                                    name: 'otoplenie',
                                    boxLabel: 'Отопление',
                                    checked: true,
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    x: 280,
                                    y: 40,
                                    fieldLabel: '',
                                    name: 'podogrev',
                                    boxLabel: 'Подогрев',
                                    checked: true,
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    x: 10,
                                    y: 10,
                                    fieldLabel: '',
                                    name: 'voda',
                                    boxLabel: 'Водоснабжение',
                                    checked: true,
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    x: 10,
                                    y: 40,
                                    fieldLabel: '',
                                    name: 'stoki',
                                    boxLabel: 'Водоотведение',
                                    checked: true,
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    x: 140,
                                    y: 10,
                                    fieldLabel: '',
                                    name: 'kvartplata',
                                    boxLabel: 'Квартплата',
                                    checked: true,
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'checkboxfield',
                                    x: 140,
                                    y: 40,
                                    fieldLabel: '',
                                    name: 'tbo',
                                    boxLabel: 'Вывоз мусора',
                                    checked: true,
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'button',
                                    handler: function(button, e) {
                                        // in use
                                        var form = button.findParentByType('form');
                                        var value = form.getValues();
                                        var  cbAddress = Ext.getCmp('cbAddress');
                                        //console.log(value);
                                        //STORE
                                        var stUser = Ext.data.StoreManager.get("StUser");
                                        var address_id = cbAddress.getValue();


                                        //LOGIN & PASSWORD
                                        var values =stUser.getAt(0);
                                        var params = {
                                            login:values.get('login'),
                                            password:values.get('password'),
                                            address_id:address_id,
                                            what:"addBasaNachAddress"
                                        };


                                        //LOGIKA

                                        Ext.Object.merge(value, params);
                                        //LOGIKA

                                        QueryAddress.updateRecords(value,function(results){
                                            if(results.success==="1"){
                                                Ext.MessageBox.show({
                                                    title: 'Добавление баз начислений по адресу',
                                                    msg: results.msg,
                                                    buttons: Ext.MessageBox.OK,
                                                    icon: Ext.MessageBox.INFO
                                                });

                                            } else {
                                                Ext.MessageBox.show({
                                                    title: 'Добавление баз начислений по адресу',
                                                    msg: results.msg,
                                                    buttons: Ext.MessageBox.OK,
                                                    icon: Ext.MessageBox.ERROR
                                                });
                                            }

                                        });
                                    },
                                    x: 220,
                                    y: 85,
                                    formBind: false,
                                    height: 30,
                                    id: 'btAddBasa',
                                    width: 160,
                                    icon: 'resources/css/images/ico/add.png',
                                    text: 'Добавить базы'
                                },
                                {
                                    xtype: 'datefield',
                                    x: 5,
                                    y: 85,
                                    id: 'dataAddBasa',
                                    width: 203,
                                    fieldLabel: 'Период',
                                    labelWidth: 70,
                                    name: 'data',
                                    format: 'F,Y',
                                    startDay: 1,
                                    submitFormat: 'Ymd'
                                }
                            ]
                        },
                        {
                            xtype: 'fieldset',
                            x: 10,
                            y: 155,
                            height: 65,
                            style: 'background-color: #f1eeee;',
                            width: 710,
                            layout: 'absolute',
                            title: 'Квартиры',
                            items: [
                                {
                                    xtype: 'textfield',
                                    x: 10,
                                    y: 10,
                                    width: 200,
                                    fieldLabel: 'Номер 1й квартиры',
                                    labelWidth: 130,
                                    name: 'nomerkv',
                                    value: 1
                                },
                                {
                                    xtype: 'numberfield',
                                    x: 220,
                                    y: 10,
                                    width: 200,
                                    fieldLabel: 'Количество квартир',
                                    labelWidth: 130,
                                    name: 'qtykv',
                                    value: 1,
                                    hideTrigger: true
                                },
                                {
                                    xtype: 'button',
                                    x: 435,
                                    y: 5,
                                    formBind: false,
                                    disabled: true,
                                    height: 30,
                                    id: 'btAddAddress',
                                    width: 240,
                                    icon: 'resources/css/images/ico/add.png',
                                    text: 'Добавить адрес'
                                }
                            ]
                        },
                        {
                            xtype: 'combobox',
                            x: 0,
                            y: 55,
                            disabled: true,
                            id: 'cbAddress',
                            width: 300,
                            fieldLabel: 'квартиры в доме',
                            labelWidth: 120,
                            name: 'address',
                            displayField: 'address',
                            queryMode: 'local',
                            store: 'StAddressOrg',
                            valueField: 'address_id',
                            listeners: {
                                select: 'onComboboxSelect3'
                            }
                        },
                        {
                            xtype: 'checkboxfield',
                            handler: function(checkbox, checked) {
                                var  form = checkbox.findParentByType('form');
                                var  cbHouse = form.getForm().findField('house_id');
                                var  cbAddress = form.getForm().findField('address');
                                var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');

                                var  delAddressId = fmDeleteAddress.getForm().findField('delAddressId');
                                var  delHouseId = fmDeleteAddress.getForm().findField('delHouseId');


                                var adrec = cbAddress.getRawValue();
                                var address_id = cbAddress.getValue();
                                var house_id = cbHouse.getValue();



                                var value = form.getValues();
                                if (checked) {

                                    fmDeleteAddress.show().setTitle('('+address_id+')&nbsp;&nbsp;Удалить адрес &nbsp;&nbsp;&nbsp;' + adrec );
                                    var  btnDeleteAddress = Ext.getCmp('btnDeleteAddress');
                                    btnDeleteAddress.setText('Удалить все базы + по адресу &nbsp;' + adrec );
                                    btnDeleteAddress.setDisabled(true);

                                    // fmDeleteAddress.getForm().loadRecord(0);
                                    delAddressId.setValue(address_id);
                                    delHouseId.setValue(house_id);


                                    fmDeleteAddress.getForm().findField('control').setValue(0);
                                }else{
                                    fmDeleteAddress.hide();
                                    delAddressId.setValue(0);
                                    delHouseId.setValue(0);


                                }
                            },
                            x: 145,
                            y: 85,
                            id: 'chbDeleteAddress',
                            fieldLabel: 'Удалить адрес',
                            name: 'chbDeleteAddress',
                            boxLabel: '',
                            inputValue: '1',
                            uncheckedValue: '0'
                        }
                    ]
                },
                {
                    xtype: 'label',
                    x: 305,
                    y: 225,
                    id: 'showStreet',
                    padding: '10 0 5 5',
                    style: 'color: #D15706; text-shadow: -1px -1px white, 1px 1px #333;font-size:14pt;text-align:left;',
                    width: 185,
                    text: 'Адрес'
                },
                {
                    xtype: 'label',
                    x: 55,
                    y: 225,
                    id: 'showRaion',
                    padding: '10 0 5 5',
                    style: 'color: #D15706; text-shadow: -1px -1px white, 1px 1px #333;font-size:14pt;text-align:left;',
                    width: 170,
                    text: 'Адрес'
                },
                {
                    xtype: 'form',
                    x: 45,
                    y: 535,
                    height: 135,
                    id: 'fmDeleteAddress',
                    style: 'background-color: #C2D9E9;',
                    width: 745,
                    layout: 'absolute',
                    title: 'Процедура удаления адреса',
                    items: [
                        {
                            xtype: 'fieldset',
                            x: 15,
                            y: 5,
                            height: 80,
                            style: 'background-color: #e0e0e0;',
                            width: 710,
                            layout: 'absolute',
                            title: 'Контроль баз  по коммунальным услугам',
                            items: [
                                {
                                    xtype: 'checkboxfield',
                                    handler: function(checkbox, checked) {


                                        var stUser = Ext.data.StoreManager.get("StUser");
                                        var  form = checkbox.findParentByType('form');
                                        var  btnDeleteAddress = Ext.getCmp('btnDeleteAddress');
                                        var values =stUser.getAt(0);
                                        var value = {
                                            login:values.get('login'),
                                            password:values.get('password'),
                                            address_id:form.getForm().findField('delAddressId').getValue(),
                                            what:'checkDelAddress'
                                        };

                                        if (checked) {


                                            QueryAddress.updateRecords(value,function(results){
                                                if (results.success==="1"){
                                                    btnDeleteAddress.setDisabled(false);

                                                    Ext.MessageBox.show({
                                                        title: 'Проверка для удаления адреса',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.INFO
                                                    });

                                                } else {
                                                    Ext.MessageBox.show({
                                                        title: 'Проверка для удаления адреса',
                                                        msg: results.msg,
                                                        buttons: Ext.MessageBox.OK,
                                                        icon: Ext.MessageBox.INFO
                                                    });
                                                }
                                            });

                                        } else {
                                            btnDeleteAddress.setDisabled(true);

                                        }

                                    },
                                    x: 5,
                                    y: 10,
                                    formBind: false,
                                    fieldLabel: '',
                                    name: 'control',
                                    boxLabel: 'Контроль',
                                    inputValue: '1',
                                    uncheckedValue: '0'
                                },
                                {
                                    xtype: 'button',
                                    x: 125,
                                    y: 10,
                                    formBind: true,
                                    disabled: true,
                                    height: 30,
                                    id: 'btnDeleteAddress',
                                    width: 545,
                                    icon: 'resources/css/images/ico/no.png',
                                    text: 'Удалить  адрес'
                                }
                            ]
                        },
                        {
                            xtype: 'hiddenfield',
                            fieldLabel: 'Label',
                            name: 'delAddressId'
                        },
                        {
                            xtype: 'hiddenfield',
                            x: 70,
                            y: 130,
                            fieldLabel: 'Label',
                            name: 'delHouseId'
                        }
                    ]
                }
            ]
        }
    ],
    listeners: {
        activate: 'onTabNewAddressActivate'
    },

    onComboboxSelect: function(combo, record, eOpts) {
        // STORE

        var StHouses = Ext.data.StoreManager.get("StHousesOrg");
        var StStreet = Ext.data.StoreManager.get("StStreetOrg");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        //COMBO

        var form = combo.findParentByType('form');
        var  btAddOsmd = Ext.getCmp('btAddOsmd');

        var  newOsmd = form.getForm().findField('newOsmd');
        var  osmd = form.getForm().findField('osmd');


        var  allStreet = form.getForm().findField('allStreet');
        var  cbStreet = form.getForm().findField('street_id');
        var  cbHouse = form.getForm().findField('house_id');
        var  cbAddress = form.getForm().findField('address');
        var  showRaion = Ext.getCmp('showRaion');
        var  showStreet = Ext.getCmp('showStreet');
        //var  showHouses = Ext.getCmp('showHouses');
        var  btAddHouse = Ext.getCmp('btAddHouse');
        var  btAddAddress = Ext.getCmp('btAddAddress');
        var  btAddStreet = Ext.getCmp('btAddStreet');
        var  newStreet = form.getForm().findField('newStreet');
        var  newhouse = form.getForm().findField('newhouse');
        var  nomer = form.getForm().findField('nomer');

        var  chbDeleteAddress = Ext.getCmp('chbDeleteAddress');
        var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');
        chbDeleteAddress.setVisible(false);
        fmDeleteAddress.setVisible(false);



        //console.log(showRaion);
        var selected = record;


        //LOGIKA

        if (selected) {
            StStreet.removeAll();
            StHouses.removeAll();
            StAddress.removeAll();
            cbStreet.clearValue();
            cbAddress.clearValue();
            cbHouse.clearValue();
            allStreet.setValue(false);
            btAddAddress.setDisabled(true);
            btAddStreet.setDisabled(true);
            btAddHouse.setDisabled(true);
            cbStreet.setDisabled(false);
            cbHouse.setDisabled(true);
            cbAddress.setDisabled(true);
            showRaion.setText(selected.data.raion ).show();
            showStreet.setText(selected.data.raion ).hide();
            //   showHouses.setText(selected.data.raion ).hide();
            newhouse.setValue("");
            nomer.setValue("");
            newStreet.setValue("");
            newOsmd.setValue("");
            newOsmd.setDisabled(true);
            btAddOsmd.setDisabled(true);
            osmd.setDisabled(true);
            osmd.setValue(false);

            StStreet.load({
                params: {
                    what:'StreetsFromRaion',
                    what_id: selected.data.raion_id
                },
                scope: this
            });
        }
    },

    onTextfieldChange1: function(field, newValue, oldValue, eOpts) {
        var  btAddRaion = Ext.getCmp('btAddRaion');
        btAddRaion.setDisabled(false);

    },

    onBtAddRaionClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var StRaion = Ext.data.StoreManager.get("StRaionOrg");
        var StStreet = Ext.data.StoreManager.get("StStreetOrg");
        var StHouses = Ext.data.StoreManager.get("StHousesOrg");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        var stUser = Ext.data.StoreManager.get("StUser");
        var  form = button.findParentByType('form');
        var  cbStreet = form.getForm().findField('street_id');
        var  cbHouse = form.getForm().findField('house_id');
        var  cbRaion = form.getForm().findField('raion_id');
        var  cbAddress = form.getForm().findField('address');
        var  newStreet = form.getForm().findField('newStreet');
        var  newRaion = form.getForm().findField('newRaion');
        var  newhouse = form.getForm().findField('newhouse');
        var  nomer = form.getForm().findField('nomer');

        //var  showHouses = Ext.getCmp('showHouses');
        var  showRaion = Ext.getCmp('showRaion');
        var  showStreet = Ext.getCmp('showStreet');
        var  btAddAddress = Ext.getCmp('btAddAddress');
        var  btAddStreet = Ext.getCmp('btAddStreet');
        var  btAddHouse = Ext.getCmp('btAddHouse');
        var  btAddRaion = Ext.getCmp('btAddRaion');





        var value = form.getValues();

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"newRaion"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Добавление нового района',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StStreet.removeAll();
                StStreet.removeAll();
                // StHouses.removeAll();
                StAddress.removeAll();
                cbStreet.clearValue();
                cbHouse.clearValue();
                cbAddress.clearValue();
                btAddAddress.setDisabled(true);
                btAddHouse.setDisabled(true);
                btAddStreet.setDisabled(true);



                StRaion.load({
                    params: {
                        what:'raion',
                        what_id: 0
                    },
                    callback: function(records,operation,success){
                        if(success){
                            cbRaion.setValue(parseInt(results.new_id,0));
                            cbAddress.setDisabled(true);
                            cbHouse.setDisabled(true);
                            btAddRaion.setDisabled(true);
                            cbStreet.setDisabled(false);

                            showRaion.setText(results.new_name).show();
                            showStreet.hide();
                            // showHouses.hide();
                            nomer.setValue("");
                            newStreet.setValue("");
                            newRaion.setValue("");
                            newhouse.setValue("");



                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Добавление нового района',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onComboboxSelect1: function(combo, record, eOpts) {
        // STORE

        var StHouses = Ext.data.StoreManager.get("StHousesOrg");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        //COMBO

        var  form = combo.findParentByType('form');
        var  cbHouse = form.getForm().findField('house_id');
        var  cbAddress = form.getForm().findField('address');
        var  newhouse = form.getForm().findField('newhouse');
        var  nomer = form.getForm().findField('nomer');
        var  btAddOsmd = Ext.getCmp('btAddOsmd');
        var  newOsmd = form.getForm().findField('newOsmd');
        var  osmd = form.getForm().findField('osmd');

        var  showStreet = Ext.getCmp('showStreet');
        //var  showHouses = Ext.getCmp('showHouses');
        var  btAddAddress = Ext.getCmp('btAddAddress');
        var  btAddHouse = Ext.getCmp('btAddHouse');
        var  chbDeleteAddress = Ext.getCmp('chbDeleteAddress');
        var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');
        chbDeleteAddress.setVisible(false);
        fmDeleteAddress.setVisible(false);



        //console.log(showRaion);
        var selected = record;


        //LOGIKA

        if (selected) {
            StHouses.removeAll();
            StAddress.removeAll();
            cbHouse.clearValue();
            cbAddress.clearValue();
            btAddAddress.setDisabled(true);
            btAddHouse.setDisabled(false);
            cbHouse.setDisabled(false);
            cbAddress.setDisabled(true);
            showStreet.setText(selected.data.street ).show();
            //showHouses.hide();
            newhouse.setValue(selected.data.street );
            nomer.setValue("");
            newOsmd.setDisabled(true);
            newOsmd.setValue("");
            btAddOsmd.setDisabled(true);
            osmd.setDisabled(true);
            osmd.setValue(false);





            StHouses.load({
                params: {
                    what:'HousesFromStreet',
                    what_id: selected.data.street_id
                },
                scope: this
            });
        }
    },

    onTextfieldChange2: function(field, newValue, oldValue, eOpts) {
        var  btAddStreet = Ext.getCmp('btAddStreet');
        btAddStreet.setDisabled(false);

    },

    onBtAddStreetClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var StStreet = Ext.data.StoreManager.get("StStreetOrg");
        var StHouses = Ext.data.StoreManager.get("StHousesOrg");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        var stUser = Ext.data.StoreManager.get("StUser");
        var  form = button.findParentByType('form');
        var  cbStreet = form.getForm().findField('street_id');
        var  cbHouse = form.getForm().findField('house_id');
        var  cbAddress = form.getForm().findField('address');
        var  newStreet = form.getForm().findField('newStreet');
        var  newhouse = form.getForm().findField('newhouse');
        var  nomer = form.getForm().findField('nomer');

        //var  showHouses = Ext.getCmp('showHouses');
        var  showStreet = Ext.getCmp('showStreet');
        var  btAddAddress = Ext.getCmp('btAddAddress');
        var  btAddStreet = Ext.getCmp('btAddStreet');
        var  btAddHouse = Ext.getCmp('btAddHouse');





        var value = form.getValues();

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"newStreet"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Добавление новой улицы',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StStreet.removeAll();
                StHouses.removeAll();
                StAddress.removeAll();
                cbStreet.clearValue();
                cbHouse.clearValue();
                cbAddress.clearValue();
                btAddAddress.setDisabled(true);
                btAddHouse.setDisabled(true);

                StStreet.load({
                    params: {
                        what:'StreetsFromRaion',
                        what_id: 0
                    },
                    callback: function(records,operation,success){
                        if(success){
                            cbStreet.setValue(parseInt(results.new_id,0));
                            cbAddress.setDisabled(true);
                            btAddStreet.setDisabled(true);
                            newhouse.setValue(results.new_name );
                            showStreet.setText(results.new_name).show();
                           // showHouses.hide();
                            nomer.setValue("");
                            newStreet.setValue("");


                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Добавление новой улицы',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onComboboxSelect2: function(combo, record, eOpts) {
        // STORE

        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        //COMBO

        var  form = combo.findParentByType('form');
        var  cbAddress = form.getForm().findField('address');

        //var  showHouses = Ext.getCmp('showHouses');
        var  btAddAddress = Ext.getCmp('btAddAddress');
        var  btAddOsmd = Ext.getCmp('btAddOsmd');

        var  newOsmd = form.getForm().findField('newOsmd');
        var  osmd = form.getForm().findField('osmd');


        var  chbDeleteAddress = Ext.getCmp('chbDeleteAddress');
        var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');
        chbDeleteAddress.setVisible(false);
        fmDeleteAddress.setVisible(false);


        var selected = record;


        //LOGIKA

        if (selected) {
            StAddress.removeAll();
            cbAddress.clearValue();
            cbAddress.setDisabled(false);
            if (selected.data.osmd == 1) {

                osmd.setValue(true);
                osmd.setDisabled(true);
                btAddOsmd.setDisabled(false);
                newOsmd.setDisabled(false);
                newOsmd.setValue(selected.data.abbr);
            } else {


                osmd.setDisabled(false);
                osmd.setValue(false);
                newOsmd.setDisabled(true);
                newOsmd.setValue(selected.data.abbr);
                btAddOsmd.setDisabled(true);

            }

            //showHouses.setText(selected.data.house ).show();
            btAddAddress.setDisabled(false);

            StAddress.load({
                params: {
                    what:'AddressFromHouses',
                    what_id: selected.data.house_id
                },
                scope: this
            });
        }
    },

    onBtAddHouseClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var StHouses = Ext.data.StoreManager.get("StHousesOrg");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        var stUser = Ext.data.StoreManager.get("StUser");
        var  form = button.findParentByType('form');
        var  cbHouse = form.getForm().findField('house_id');
        var  cbAddress = form.getForm().findField('address');
        var  newhouse = form.getForm().findField('newhouse');

        //var  showHouses = Ext.getCmp('showHouses');
        var  btAddAddress = Ext.getCmp('btAddAddress');



        var value = form.getValues();

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"newHouse"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Добавление нового дома',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StHouses.removeAll();
                StAddress.removeAll();
                cbHouse.clearValue();
                cbAddress.clearValue();
                btAddAddress.setDisabled(false);

                StHouses.load({
                    params: {
                        what:'HousesFromStreet',
                        what_id: value.street_id
                    },
                    callback: function(records,operation,success){
                        if(success){
                            cbHouse.setDisabled(false);
                            cbHouse.setValue(parseInt(results.new_id,10));
                            cbAddress.setDisabled(false);
                            //showHouses.setText(results.new_name).show();
                        }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Добавление нового дома',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onTextfieldChange3: function(field, newValue, oldValue, eOpts) {
        var  btAddOsmd = Ext.getCmp('btAddOsmd');
        btAddOsmd.setDisabled(false);

    },

    onTextfieldValidityChange2: function(field, isValid, eOpts) {
        var  btAddStreet = Ext.getCmp('btAddHouse');
        btAddStreet.setDisabled(false);

    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        var  btAddStreet = Ext.getCmp('btAddHouse');
        btAddStreet.setDisabled(false);

    },

    onCheckboxfieldChange: function(field, newValue, oldValue, eOpts) {
        var  form = field.findParentByType('form');

        var  btAddOsmd = Ext.getCmp('btAddOsmd');
        //var  btAddRko = Ext.getCmp('btAddRko');

        var  newOsmd = form.getForm().findField('newOsmd');
        //var  rko = form.getForm().findField('rko');

        newOsmd.setDisabled(false);
        newOsmd.setValue("");
        btAddOsmd.setDisabled(true);
        //btAddRko.setDisabled(false);
        //rko.setValue(false);


    },

    onBtAddOsmdClick: function(button, e, eOpts) {
        // in use
        var me = this;
        //STORE
        var StHouses = Ext.data.StoreManager.get("StHousesOrg");
        var StAddress = Ext.data.StoreManager.get("StAddressOrg");

        var stUser = Ext.data.StoreManager.get("StUser");
        var  form = button.findParentByType('form');
        var  cbAddress = form.getForm().findField('address');
        var  newhouse = form.getForm().findField('newhouse');

        //var  showHouses = Ext.getCmp('showHouses');
        var  btAddAddress = Ext.getCmp('btAddAddress');


        var value = form.getValues();

        //LOGIN & PASSWORD
        var values =stUser.getAt(0);
        var params = {
            login:values.get('login'),
            password:values.get('password'),
            what:"addHouseOsmd"
        };

        //LOGIKA

        Ext.Object.merge(value, params);
        QueryAddress.updateRecords(value,function(results){
            if(results.success==="1"){
                Ext.MessageBox.show({
                    title: 'Обновление статуса дома',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.INFO
                });
                StAddress.removeAll();
                cbAddress.clearValue();
                btAddAddress.setDisabled(false);

                StHouses.load({
                    params: {
                        what:'HousesFromStreet',
                        what_id: value.street_id
                    },
                    callback: function(records,operation,success){
                        if(success){
                            cbAddress.setDisabled(false);
                             }
                    },
                    scope:this
                });
            } else {
                Ext.MessageBox.show({
                    title: 'Обновление статуса дома',
                    msg: results.msg,
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }

        });
    },

    onComboboxSelect3: function(combo, record, eOpts) {
        var  chbDeleteAddress = Ext.getCmp('chbDeleteAddress');
        var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');
        var  btAddBasa = Ext.getCmp('btAddBasa');
        var  dataAddBasa = Ext.getCmp('dataAddBasa');


        var dt = new Date();
        var  firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;


        chbDeleteAddress.setVisible(true);
        chbDeleteAddress.setValue(0);
        btAddBasa.setVisible(true);
        dataAddBasa.setVisible(true);
        dataAddBasa.setValue(Ext.Date.format(firstDay, 'Y-m-d'));

        fmDeleteAddress.setVisible(false);

    },

    onTabNewAddressActivate: function(component, eOpts) {
        var  fmDeleteAddress = Ext.getCmp('fmDeleteAddress');
        var  chbDeleteAddress = Ext.getCmp('chbDeleteAddress');
        var  btAddBasa = Ext.getCmp('btAddBasa');
        var  dataAddBasa = Ext.getCmp('dataAddBasa');
        var dt = new Date();
        var  firstDay = Ext.Date.getFirstDateOfMonth( dt ) ;

        dataAddBasa.setValue(Ext.Date.format(firstDay, 'Y-m-d'));

        btAddBasa.setVisible(false);
        dataAddBasa.setVisible(false);

        fmDeleteAddress.setVisible(false);
        chbDeleteAddress.setVisible(false);

    }

});