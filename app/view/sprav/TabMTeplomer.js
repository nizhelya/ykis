/*
 * File: app/view/sprav/TabMTeplomer.js
 * Date: Fri May 22 2015 20:22:16 GMT+0300 (EEST)
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Ykis.view.sprav.TabMTeplomer', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.tabmteplomer',

    requires: [
        'Ykis.view.sprav.TabMTeplomerViewModel',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.panel.Tool',
        'Ext.grid.plugin.RowEditing',
        'Ext.grid.column.Number',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.grid.column.Action',
        'Ext.selection.CheckboxModel',
        'Ext.grid.plugin.BufferedRenderer'
    ],

    viewModel: {
        type: 'tabmteplomer'
    },
    scrollable: true,
    layout: 'fit',
    closable: true,
    title: 'Модели тепломеров',
    defaultListenerScope: true,

    initConfig: function(instanceConfig) {
        var me = this,
            config = {
                items: [
                    {
                        xtype: 'gridpanel',
                        id: 'grTmodel',
                        scrollable: true,
                        width: 519,
                        title: 'Ввод и редактированние моделей тепломеров',
                        store: 'StTmodel',
                        tools: [
                            {
                                xtype: 'tool',
                                callback: function(owner, tool, event) {
                                    var me = this;
                                    var grid = tool.findParentByType('grid');
                                    var store = grid.store;
                                    var plugin = grid.getPlugin('rowEditTmodel');

                                    plugin.cancelEdit();
                                    var newRecord = store.model.create();
                                    store.insert(0, newRecord);
                                    plugin.startEdit(0, 0);
                                },
                                tooltip: 'Добавить запись',
                                type: 'plus'
                            }
                        ],
                        plugins: [
                            Ext.create('Ext.grid.plugin.RowEditing', {
                                pluginId: 'rowEditTmodel',
                                listeners: {
                                    edit: 'onRowEditingEdit'
                                }
                            }),
                            Ext.create('Ext.grid.plugin.BufferedRenderer', {

                            })
                        ],
                        columns: [
                            {
                                xtype: 'numbercolumn',
                                hidden: true,
                                dataIndex: 'model_id',
                                text: 'Модель ид'
                            },
                            {
                                xtype: 'gridcolumn',
                                width: 260,
                                dataIndex: 'model',
                                text: 'Модель',
                                editor: {
                                    xtype: 'textfield'
                                }
                            },
                            {
                                xtype: 'gridcolumn',
                                dataIndex: 'edizm',
                                text: 'Ед. изм',
                                editor: {
                                    xtype: 'combobox',
                                    displayField: 'edizm',
                                    store: 'StEdIzm',
                                    valueField: 'edizm'
                                }
                            },
                            {
                                xtype: 'numbercolumn',
                                width: 89,
                                dataIndex: 'koef',
                                text: 'Коеф',
                                format: '0.000000',
                                editor: {
                                    xtype: 'numberfield',
                                    value: 1,
                                    decimalPrecision: 6
                                }
                            },
                            {
                                xtype: 'actioncolumn',
                                editRenderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                    var val="";
                                    return val;
                                },
                                width: 49,
                                menuDisabled: true,
                                tooltip: 'Удалить',
                                items: [
                                    {
                                        handler: function(view, rowIndex, colIndex, item, e, record, row) {
                                            var grid = view.findParentByType('grid');
                                            var store = view.store;
                                            var plugin = grid.getPlugin('rowEditTmodel');
                                            plugin.cancelEdit();

                                            Ext.MessageBox.show({
                                                title: 'Внимание!',
                                                msg: 'Вы удаляете данные ! Подтвердите свои действия!',
                                                buttons: Ext.MessageBox.OKCANCEL,
                                                icon: Ext.MessageBox.WARNING,

                                                buttonText:{
                                                    ok: "Удалить!",
                                                    cancel: "Отмена"
                                                },
                                                fn:function(btn){
                                                    if(btn=='ok'){
                                                        store.remove(record);

                                                        store.sync({
                                                            success: function(){
                                                                Ext.MessageBox.show({title: 'Удаление записи',
                                                                    msg:"Запись удалена",
                                                                    buttons: Ext.MessageBox.OK,
                                                                    icon: Ext.MessageBox.INFO
                                                                });
                                                            },
                                                            failure: function(){
                                                                Ext.MessageBox.show({title: 'Удаление записи',
                                                                    msg:"Невозможно удалить: модель тепломера уже используется",
                                                                    buttons: Ext.MessageBox.OK,
                                                                    icon: Ext.MessageBox.ERROR
                                                                });

                                                            },
                                                            scope: this
                                                        });
                                                    }
                                                }

                                            });

                                        },
                                        icon: 'resources/css/images/ico/no.png'
                                    }
                                ]
                            }
                        ],
                        selModel: Ext.create('Ext.selection.CheckboxModel', {
                            selType: 'checkboxmodel',
                            mode: 'SINGLE'
                        })
                    }
                ]
            };
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    onRowEditingEdit: function(editor, context, eOpts) {

        var grid = editor.grid;
        var store = grid.getStore();
        var sm = store.getUpdatedRecords();
        var data = grid.getSelectionModel();

        if(sm.length) {
            store.sync({
                success: function(){

                    store.load();

                }
            });

        } else {
            store.sync({
                success: function(){
                    Ext.MessageBox.show({
                        title: 'Добавление записи',
                        msg: 'Запись добавлена',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });

                    store.load();
                }
            });

        }

    }

});